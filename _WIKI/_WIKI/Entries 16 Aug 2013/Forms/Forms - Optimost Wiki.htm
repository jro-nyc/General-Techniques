<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" dir="ltr" lang="en"><head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<meta name="generator" content="MediaWiki 1.13.1">
		<meta name="keywords" content="Forms,Appending Elements to a Form,Focus on the First Element in a Form,Form Replication,Getting Radio Button and Checkbox Values,Technical Consulting">
		<link rel="shortcut icon" href="http://wiki.interwoven.com/favicon.ico">
		<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.interwoven.com/opwiki/opensearch_desc.php" title="Optimost Wiki (en)">
		<link rel="alternate" type="application/rss+xml" title="Optimost Wiki RSS Feed" href="http://wiki.interwoven.com/opwiki/index.php?title=Special:RecentChanges&amp;feed=rss">
		<link rel="alternate" type="application/atom+xml" title="Optimost Wiki Atom Feed" href="http://wiki.interwoven.com/opwiki/index.php?title=Special:RecentChanges&amp;feed=atom">
		<title>Forms - Optimost Wiki</title>
		<style type="text/css" media="screen, projection">/*<![CDATA[*/
			@import "/opwiki/skins/common/shared.css?164";
			@import "/opwiki/skins/monobook/main.css?164";
		/*]]>*/</style>
		<link rel="stylesheet" type="text/css" media="print" href="Forms%20-%20Optimost%20Wiki_files/commonPrint.css">
		<!--[if lt IE 5.5000]><style type="text/css">@import "/opwiki/skins/monobook/IE50Fixes.css?164";</style><![endif]-->
		<!--[if IE 5.5000]><style type="text/css">@import "/opwiki/skins/monobook/IE55Fixes.css?164";</style><![endif]-->
		<!--[if IE 6]><style type="text/css">@import "/opwiki/skins/monobook/IE60Fixes.css?164";</style><![endif]-->
		<!--[if IE 7]><style type="text/css">@import "/opwiki/skins/monobook/IE70Fixes.css?164";</style><![endif]-->
		<!--[if lt IE 7]><script type="text/javascript" src="/opwiki/skins/common/IEFixes.js?164"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
		
		<script type="text/javascript">/*<![CDATA[*/
var skin = "monobook";
var stylepath = "/opwiki/skins";
var wgArticlePath = "/optimost/$1";
var wgScriptPath = "/opwiki";
var wgScript = "/opwiki/index.php";
var wgVariantArticlePath = false;
var wgActionPaths = [];
var wgServer = "http://wiki.interwoven.com";
var wgCanonicalNamespace = "";
var wgCanonicalSpecialPageName = false;
var wgNamespaceNumber = 0;
var wgPageName = "Forms";
var wgTitle = "Forms";
var wgAction = "view";
var wgArticleId = "55";
var wgIsArticle = true;
var wgUserName = null;
var wgUserGroups = null;
var wgUserLanguage = "en";
var wgContentLanguage = "en";
var wgBreakFrames = false;
var wgCurRevisionId = "4284";
var wgVersion = "1.13.1";
var wgEnableAPI = true;
var wgEnableWriteAPI = false;
var wgRestrictionEdit = [];
var wgRestrictionMove = [];
/*]]>*/</script>
                
		<script type="text/javascript" src="Forms%20-%20Optimost%20Wiki_files/wikibits.js"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="Forms%20-%20Optimost%20Wiki_files/ajax.js"></script>
		<script type="text/javascript" src="Forms%20-%20Optimost%20Wiki_files/index.php"><!-- site js --></script><script type="text/javascript" src="Forms%20-%20Optimost%20Wiki_files/index_002.php"></script>
		<style type="text/css">/*<![CDATA[*/
@import "/opwiki/index.php?title=MediaWiki:Common.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=18000";
@import "/opwiki/index.php?title=MediaWiki:Monobook.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=18000";
@import "/opwiki/index.php?title=-&action=raw&gen=css&maxage=18000";
/*]]>*/</style>
	</head>
<body class="mediawiki ns-0 ltr page-Forms">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
				<h1 class="firstHeading">Forms</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Optimost Wiki</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table style="clear: right; margin-bottom: .5em; float: right; padding: .5em 0 .8em 1.4em; background: none; width: auto;" cellpadding="0" cellspacing="0">
<tbody><tr>
<td> <table id="toc" class="toc" summary="Contents"><tbody><tr><td><div id="toctitle"><h2>Contents</h2> <span class="toctoggle">[<a href="javascript:toggleToc()" class="internal" id="togglelink">hide</a>]</span></div>
<ul>
<li class="toclevel-1"><a href="#Basics"><span class="tocnumber">1</span> <span class="toctext">Basics</span></a></li>
<li class="toclevel-1"><a href="#The_FORM_tag"><span class="tocnumber">2</span> <span class="toctext">The FORM tag</span></a>
<ul>
<li class="toclevel-2"><a href="#name"><span class="tocnumber">2.1</span> <span class="toctext">name</span></a></li>
<li class="toclevel-2"><a href="#Caveat"><span class="tocnumber">2.2</span> <span class="toctext">Caveat</span></a></li>
<li class="toclevel-2"><a href="#action"><span class="tocnumber">2.3</span> <span class="toctext">action</span></a></li>
<li class="toclevel-2"><a href="#method"><span class="tocnumber">2.4</span> <span class="toctext">method</span></a></li>
<li class="toclevel-2"><a href="#enctype"><span class="tocnumber">2.5</span> <span class="toctext">enctype</span></a></li>
<li class="toclevel-2"><a href="#onsubmit"><span class="tocnumber">2.6</span> <span class="toctext">onsubmit</span></a></li>
<li class="toclevel-2"><a href="#Caveat_2"><span class="tocnumber">2.7</span> <span class="toctext">Caveat</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#FORM_Elements"><span class="tocnumber">3</span> <span class="toctext">FORM Elements</span></a>
<ul>
<li class="toclevel-2"><a href="#Caveat_3"><span class="tocnumber">3.1</span> <span class="toctext">Caveat</span></a></li>
<li class="toclevel-2"><a href="#The_Average_FORM_tag"><span class="tocnumber">3.2</span> <span class="toctext">The Average FORM tag</span></a></li>
<li class="toclevel-2"><a href="#INPUT_type.3D.22hidden.22"><span class="tocnumber">3.3</span> <span class="toctext">INPUT type="hidden"</span></a></li>
<li class="toclevel-2"><a href="#Caveat_4"><span class="tocnumber">3.4</span> <span class="toctext">Caveat</span></a></li>
<li class="toclevel-2"><a href="#INPUT_type.3D.22text.22"><span class="tocnumber">3.5</span> <span class="toctext">INPUT type="text"</span></a></li>
<li class="toclevel-2"><a href="#SELECT"><span class="tocnumber">3.6</span> <span class="toctext">SELECT</span></a></li>
<li class="toclevel-2"><a href="#INPUT_type.3D.22radio.22"><span class="tocnumber">3.7</span> <span class="toctext">INPUT type="radio"</span></a></li>
<li class="toclevel-2"><a href="#Caveat_5"><span class="tocnumber">3.8</span> <span class="toctext">Caveat</span></a></li>
<li class="toclevel-2"><a href="#INPUT_type.3D.22checkbox.22"><span class="tocnumber">3.9</span> <span class="toctext">INPUT type="checkbox"</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Form_Submission_-_How_it_works_from_a_back-end_perspective"><span class="tocnumber">4</span> <span class="toctext">Form Submission - How it works from a back-end perspective</span></a></li>
<li class="toclevel-1"><a href="#OPTIMOST-SPECIFIC_FORM_ISSUES"><span class="tocnumber">5</span> <span class="toctext">OPTIMOST-SPECIFIC FORM ISSUES</span></a>
<ul>
<li class="toclevel-2"><a href="#BIG_GOTCHA.21.21_The_top_things_to_look_when_you_start_...."><span class="tocnumber">5.1</span> <span class="toctext">BIG GOTCHA!! The top things to look when you start ....</span></a></li>
<li class="toclevel-2"><a href="#GOTCHA_-_When_changing_the_clickthru_at_runtime_...."><span class="tocnumber">5.2</span> <span class="toctext">GOTCHA - When changing the clickthru at runtime ....</span></a></li>
<li class="toclevel-2"><a href="#Where_are_the_Form_tags_in_relation_to_the_OPTIMOST_code.3F"><span class="tocnumber">5.3</span> <span class="toctext">Where are the Form tags in relation to the OPTIMOST code?</span></a></li>
<li class="toclevel-2"><a href="#Caveat_6"><span class="tocnumber">5.4</span> <span class="toctext">Caveat</span></a></li>
<li class="toclevel-2"><a href="#How_do_we_add.2Fmodify_elements_in_the_Form_if_its_tags_and_elements_are_entirely_INSIDE_one_of_the_modules.3F"><span class="tocnumber">5.5</span> <span class="toctext">How do we add/modify elements in the Form if its tags and elements are entirely INSIDE one of the modules?</span></a></li>
<li class="toclevel-2"><a href="#How_do_we_add.2Fmodify_elements_in_the_Form_tags_are_entirely_OUTSIDE_one_of_the_modules.3F"><span class="tocnumber">5.6</span> <span class="toctext">How do we add/modify elements in the Form tags are entirely OUTSIDE one of the modules?</span></a></li>
<li class="toclevel-2"><a href="#So_what_happens_when_the_test_plan_specifies_we_change_a_form_element_from_one_type_to_another.3F"><span class="tocnumber">5.7</span> <span class="toctext">So what happens when the test plan specifies we change a form element from one type to another?</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_Also"><span class="tocnumber">6</span> <span class="toctext">See Also</span></a></li>
</ul>
</td></tr></tbody></table><script type="text/javascript"> if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script>
</td></tr></tbody></table>
<a name="Basics"></a><h2> <span class="mw-headline">Basics</span></h2>
<p>We run a lot of experiments on pages with Forms. There are some 
tricky aspects when you are modifying Form content that effect our 
Template implementation.  Before I specifically talk about Optimost Form
 implementation, let's just review what a Form tag looks like, what it 
contains, how is works, what content it can have, and how standard form 
behavior can be a problem when testing.
</p>
<a name="The_FORM_tag"></a><h2> <span class="mw-headline">The FORM tag</span></h2>
<p>Here is a standard Form tag, with the most common attribute fields set:
</p>
<pre>&lt;form action="/acme.asp"  name="theForm" method="post" enctype="multipart/form-data" onsubmit="return checkValidation(this);"&gt;
.....
&lt;/form&gt;
</pre>
<p>I entered these 4 attributes because they are the only ones we need 
to be concerened with, and since none actually need to be there, and 
thus have default values.  I could in fact say:
</p><p><code>
&lt;form&gt;
.....
&lt;/form&gt;
</code>
</p><p>and the Form would work fine.  So let's go over what the attributes on these two Forms would be.<br>
</p>
<a name="name"></a><h3> <span class="mw-headline">name</span></h3>
<p>This is an optional attribute that appears on 90%+ of the pages we 
do.  It gives you a handle to access the form via the DOM - so in this 
case you could get the top form using <b>document.forms['theForm']</b>.<br><br>
</p>
<div class="warningbox">
<a name="Caveat"></a><h3> <span class="mw-headline">Caveat</span></h3>
<p>You may see code that accesses the form without using the document.forms[] property. In this example the first form could be 
accessed using document.theForm. I strongly STRONGLY discourage this syntax. If I see anyone's code using this syntax 
(in our content, the customer can do what they please), I will take that as aa act of brazen, intentional insubordination 
and have you sent forthwith to the Tower of London for flogging, drawing, quartering, and such, etc etc.
</p>
</div>
<p>This attribute has no default value, and in the instance there is no 
name defined, you will have to access the form through the DOM using the
 form index.  So if it is the first OR only form, it's index is <b>0</b>, if it is the second form, it uses the index <b>1</b>,... the nth form uses the index n-1. And even if the form has a name, you can also access it using the index.  
</p><p>So if the bottom form is the only form on the page, we can <b>document.forms[0]</b>.<br><br>
</p>
<a name="action"></a><h3> <span class="mw-headline">action</span></h3>
<p>This is an optional attribute that appears on about 95%+ of the pages
 we do.  It indicates where the form information, when it is submitted, 
is submitted to. It is normally a URL (once in a while an IP address), 
usually a relative-path URL, or, if not, a full-path URL. 
</p><p>This attribute defaults to the <b>document.location</b> (So if there is no action attribute - or if the action URL is ="" - then it is submitted to the URL in the <b>document.location</b>).
</p>
<a name="method"></a><h3> <span class="mw-headline">method</span></h3>
<p>This is an optional attribute that appears on about 90%+ of the pages
 we do.  It indicates if the submitted data will be sent in the the 
action's URL (GET) or in the HTTP headers going to the action's URL 
(POST).  POST-ing data is a two-step process for the browser, whereas 
GET-ing data is a single-step process, and <b>that effects how we track the form action</b>, which we will talk about later.<br><br>
This attribute defaults to GET, although it is normally set to POST in about 80%+ of pages we test.
</p>
<a name="enctype"></a><h3> <span class="mw-headline">enctype</span></h3>
<p>This is an optional attribute that appears on less than 5% of the pages we work on.  It defaults to <b>application/x-www-form-urlencoded</b>, and if we see anything else - for example <b>multipart/form-data</b> - we will <b>NOT</b> be able to track the action (the <b>multipart/form-data</b> value corresponds to an input whose type="file").
</p><p>In fact, if you see this attribute set, make sure it is <b>application/x-www-form-urlencoded</b>. If not, then we can't track the action - we can still run a test on it, but tracking will be a problem.
</p><p>This attribute defaults to <b>application/x-www-form-urlencoded</b>.
</p>
<a name="onsubmit"></a><h3> <span class="mw-headline">onsubmit</span></h3>
<p>this is an event that gets executed when the Form submits.  When it 
is defined, it is normally used to do client-side form validation to 
catch blatant errors and conserve bandwidth for the customer's data pipe
 and processing time for the their servers.
If the onsubmit function returns false, the form is not submitted.  So 
the syntax above, <b>onsubmit="return checkValidation(this);"</b> would be used to use the function to validate, and if it fails, the return value is <b>false</b>.  If it returns <b>true</b>, then it would submit.<br><br>
</p>
<div class="warningbox">
<a name="Caveat_2"></a><h3> <span class="mw-headline">Caveat</span></h3>
<p>The onsubmit can do whatever it wants.  It can change the action URL,
 it can change the Form method, it could change the enctype.  
While I've not seen the last one, only seen the second once, I have seen
 the first - action URL changed - quite often.  This 
means that if we changed the Form action either by directly adding the 
clickthru to the action URL, OR adding an onclick to 
the Form, the onsubmit will get executed after both these happen, so be 
conscious that you may have to work around an 
onsubmit that does that.
</p>
</div>
<p>This is an event, and it defaults <b>null</b> (as in do nothing).
</p>
<a name="FORM_Elements"></a><h2> <span class="mw-headline">FORM Elements</span></h2>
<p>Next, let's talk about Form elements.  Below I have a sample form 
that you can in fact copy and put into Homesite if you want to play 
around with it.  It shows the input fields we usually have to deal with.
  If you try to submit, it will alert you only and not submit.  I have 
set the onsubmit event to always return false, which, as I mentioned 
above, means <b>"don't submit"</b>.
</p><p><br>
</p>
<pre>&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Simple Form Test&lt;/title&gt;
&lt;script&gt;
function checkValidation(obj){
	alert('You are trying to submit');
	return false;
}
function chkVal(obj){
	if(obj.value=='Enter Name here')obj.value='';
}
&lt;/script&gt;
&lt;style&gt;
	input.rad{display:block;margin:5px 0 5px 0;}
	select {display:block}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;form action="/acme.asp"  name="theForm" method="post" onsubmit="return checkValidation(this);" &gt;
		&lt;input type="hidden" name="ssn" value="555-12-1234" /&gt;
		&lt;input type="text" name="myName" value="Enter Name here" onfocus="chkVal(this);" title="Name field" /&gt;
		&lt;select name="age" title="Age of participant field"&gt;
			&lt;option value="1" SELECTED&gt;Under 18&lt;/option&gt;
			&lt;option value="2"&gt;18-25&lt;/option&gt;
			&lt;option value="3"&gt;26-35&lt;/option&gt;
			&lt;option value="4"&gt;36-45&lt;/option&gt;
			&lt;option value="5"&gt;46-55&lt;/option&gt;
			&lt;option value="6"&gt;Over 56&lt;/option&gt;
		&lt;/select&gt;
		&lt;input type="radio" name="gender" value="M" title="I am a man"  /&gt;
		&lt;input type="radio" name="gender" value="F" title="I am a woman" /&gt;
		&lt;input type="checkbox" name="accept" value="y" title="Do you accept out Terms" class="rad"/&gt;
		&lt;input type="submit" name="SubmitIt" class="rad" /&gt;
		&lt;input type="image" name="mySumbit" src="" class="rad" /&gt;
		&lt;button&gt;Click Here&lt;/button&gt;
	&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<div class="warningbox">
<a name="Caveat_3"></a><h3> <span class="mw-headline">Caveat</span></h3>
<p>So I did not have to setup lots more HTML tables or DIVs with form labels/information, I have set the form up so that, in a 
browser, hovering over the input displays its purpose - I did this setting the title attribute for each input.  Now some 
of our customers, in addition to having the proper form labels/information with the underlying HTML, also add title attributes 
to enhance hover functionality. That is their perogative, but I do not suggest this as a standard way of doing things. This is 
all about needing as little code as possible to explain this subject.
</p>
</div>
<p>Let's go over each element in the form.  As I describe the input 
type, I will emphasize the aspects of Optimost testing that effect that 
input - the biggest being the changing of input types for testing, and 
how that effects browser (front-end/client side) and server 
(back-end/server side) operation of the form.
</p>
<a name="The_Average_FORM_tag"></a><h3> <span class="mw-headline">The Average FORM tag</span></h3>
<p>Before we discuss the Form elements, let's talk about the average 
Form tag - what we should expect to see - to give us a starting point.  
If you got a Form page to test, I would bet it looks like this:
</p><p><code>&lt;form action="/acme.asp"  name="theForm" method="post" onsubmit="return checkValidation(this);"&gt;</code>
</p><p>Since this is the "average" tag, that means:
</p>
<ol><li>It has an action.
</li><li>It has a name.
</li><li>It has a method of <b>post</b>.
</li><li>It has no enctype set (and thus defaults to <b>application/x-www-form-urlencoded</b>).
</li><li>It has an onsubmit event.
</li></ol>
<p>We run a lot of experiments on pages with Forms. There are some 
tricky aspects when you are modifying Form content that effect our 
Template implementation.  Next, let's look at the elements of the Form 
and how our changes impact the Form's behavior.
</p>
<a name="INPUT_type.3D.22hidden.22"></a><h3> <span class="mw-headline">INPUT type="hidden"</span></h3>
<p><code>&lt;input type="hidden" name="ssn" value="555-12-3456" /&gt;</code>
</p><p>You will normally have at least one of these per page, and most 
often more - sometimes over 10.  These inputs are data that need to be 
part of the submit, but are not controlled by the user input on this 
page***. Information such as:
</p>
<ol><li>State information such as a session identifier, a date/time stamp.
</li><li>Page-specific information such as product type, page type, or some other information needed by the back-end.
</li><li>Information the user filled out on previous pages that also needs to be submitted on this page.  In this form example, I used <b>ssn</b> - social security number - as an example of a hidden input.  
</li></ol>
<p><br>
</p>
<div class="warningbox">
<a name="Caveat_4"></a><h3> <span class="mw-headline">Caveat</span></h3>
<p>One exception for hidden inputs not being controlled by user input on
 the page under test is on pages where a user behavior/action/event 
triggers a javascript function that modifies a hidden input.  For 
example, .NET pages have the hidden inputs:
</p><p>&lt;INPUT type="hidden" name="__EVENTTARGET" value="" /&gt;			
&lt;INPUT type="hidden" name="__EVENTARGUMENT" value="" /&gt;
</p><p>so that the web developer can trigger certain behavior on the back-end by setting these hidden inputs to a value.
</p>
</div>
<p>So template developers, beware! This means that <b>inputs of type="hidden" are normally dynamic from page view to page view</b>.  So if you are creating a template that is not taking the dynamic nature of the inputs into account, you will have problems.
</p>
<a name="INPUT_type.3D.22text.22"></a><h3> <span class="mw-headline">INPUT type="text"</span></h3>
<p><code>&lt;input type="text" name="myName" value="Enter Name here" onfocus="chkVal(this);" title="Name field" /&gt;</code>
</p><p>Probably the most common input, and usually the most bening.  If 
we do change how it appears on the form, we likely will change it to a 
pulldown (select).  Since a select submits the same type of data and can
 often be validated in the same way as an input of type text, there is a
 good chance the template developer will not have to do much on this 
one.
</p><p>The thing to look out for if we do change to select is that it 
may have an event to control it's appearence or trigger an error message
 - in this example I set it to say <b>Enter Name here</b> in the text 
field then clear the field when you focus on it.  Other pages may 
actually have an onblur event that makes sure something was filled in 
before you left the input, else it triggers "some error message 
indicator".  When changing to a select, we would have to make sure the 
behavior is maintained, if necessary.
</p>
<a name="SELECT"></a><h3> <span class="mw-headline">SELECT</span></h3>
<pre style="background-color:#eeeeee;">&lt;select name="age" title="Age of participant field"&gt;
	&lt;option value="1" SELECTED&gt;Under 18&lt;/option&gt;
	&lt;option value="2"&gt;18-25&lt;/option&gt;
	&lt;option value="3"&gt;26-35&lt;/option&gt;
	&lt;option value="4"&gt;36-45&lt;/option&gt;
	&lt;option value="5"&gt;46-55&lt;/option&gt;
	&lt;option value="6"&gt;Over 56&lt;/option&gt;
&lt;/select&gt;
</pre>
<p>A fairly common input, and one of the potentially tricky changes.  On
 selects that have less than 5 options, the Test Plan may suggest the 
use of <b>radio</b> buttons instead.  This is where the fun begins.
</p><p>Submitting the data does not change, since a checked radio button
 submits the same information as a select option, assuming the radio 
button values and option values are equivalent (which, if you want to 
keep your job, you will do&nbsp;:).  The problem is with error 
validation - you <b>have to iterate through the individual radio buttons to find the selected one</b>,
 as opposed to just checking what the value of the select is. (I guess 
there would be equivalence if people iterated through the select options
 and found the selected one, but I've never seen someone do that  with a
 select.... probably because it's silly and inefficient).
</p><p>So if this change is made - select changed to radio button -  and
 there is validation onsubmit or onblur, then we will need to acoount 
for it in the functions that apply to said event.
</p><p>So, for example, let's say the select above is for a gambling 
site, and if you are under 18, you can't enter.  So lets say in the 
onsubmit function - <b>checkValidation</b> - for the select, they have the following snippet of code.
</p>
<pre style="background-color:#eeeeee;">&lt;script&gt;
function checkValidation(obj){
//... there may be some validation code for other form inputs above here
	ageValidation=true;
	if(obj.age.value==1){
		alert('You must be at least 18 to gamble, junior');
		ageValidation=false;
	}
	if(ageValidation==false) return false;
//... there may be some validation code for other form inputs below here
}
&lt;/script&gt;
</pre>
<p>If the age selected is under 18, we set <b>ageValidation</b> to false, alert the visitor, and return false so that the form does not submit.
</p><p>Let's say we changed the select here to 5 radio buttons, as follows:
</p>
<pre style="background-color:#eeeeee;">&lt;input name="age" type="radio" value="1" title="Under 18"&gt;
&lt;input name="age" type="radio" value="2" title="18-25"&gt;
&lt;input name="age" type="radio" value="3" title="26-35"&gt;
&lt;input name="age" type="radio" value="4" title="36-45"&gt;
&lt;input name="age" type="radio" value="5" title="46-55"&gt;
&lt;input name="age" type="radio" value="6" title="Over 56"&gt;
</pre>
<p>So if this is the new input for the Age field, then you would need to change the validation to:
</p>
<pre style="background-color:#eeeeee;">function checkValidation(obj){
//... there may be some validation code for other form inputs above here
	age=0;
	ageValidation=false;
	for(i=0;i&lt;obj.length;i++){		
		if(obj.elements[i].type.toLowerCase()=='radio'){
			if(obj.elements[i].name=='age'){
				if(obj.elements[i].checked==true){
					age=obj.elements[i].value;
				}
			}
		}	
	}
	if(age==0){
		alert('Please enter your age');
		return false;
	}
	else if(age==1){
		alert('Sorry, you must be at least 18 to gamble, junior');
		return false;	
	}
	else {
		ageValidation=true;
	}
//... there may be some validation code for other form inputs below here
}
</pre>
<p>Obviously some change to the validation, so make sure you account for it, if needed.
</p>
<a name="INPUT_type.3D.22radio.22"></a><h3> <span class="mw-headline">INPUT type="radio"</span></h3>
<pre style="background-color:#eeeeee;">&lt;input type="radio" name="gender" value="M" title="I am a man"  /&gt;
&lt;input type="radio" name="gender" value="F" title="I am a woman" /&gt;
</pre>
<p><b>Radio buttons</b> are a fairly common input, and are also one of 
the potentially tricky changes.  This can go one of two ways - turned 
into a select if there are 3 or more buttons, OR turned into a checkbox 
if there are exactly 2.  If it's the select, then look above at changing
 the select into radio buttons and do it in reverse.  If it's a 
checkbox, now we have to deal with issues both submitting and 
validating.  
</p>
<div class="warningbox">
<a name="Caveat_5"></a><h3> <span class="mw-headline">Caveat</span></h3>
<p>If it is checkbox versus radio button for an input that must be 
selected - ie. a terms and agreements radio button that checking 
"I don't agree" brings things to a screeching halt in the web browser - 
then this is not an issue because only the positive value can be
selected, so in that instance the radio button would be the same as the 
chekcbox for submitting.  The validation would differ, 
read that section below for the difference.
</p>
</div>
<p>On the submission end, a radio button - assuming one is selected, and
 one would think that validation would insist - will always submit some 
value.  A checkbox, however ONLY submits its value IF it is selected.  
So for the customer's back-end to be happy, the Template developer needs
 to devise code that will ensure proper submission.
</p><p>On the validation end, instead of a loop to find the checked 
radio button that we saw above, checkbox validation only needs to see if
 it is checked.  This is simple, but you will need different code to do 
it. You will have to only check to see if the checkbox is selected.  So 
let's say we use:
</p>
<pre style="background-color:#eeeeee;">&lt;input type="checkbox" name="gender" value="m" title="Are You a Man" /&gt;
</pre>
<p>Specifically on the submission, since a checkbox <b>normally</b> 
sends nothing if it is not selected, then we need to do something to 
account for the unselected state.  The two possibilities are:
</p>
<ul><li>Create a button with one value.  When the form is submitted, 
check to see if the checkbox is selected.  If it is, do nothing. If it 
is not, then change the value to the other value (in this case from "m" 
to "f", check it, and continue.
</li></ul>
<pre style="background-color:#eeeeee;">function checkValidation(obj){
	//... there may be some validation code for other form inputs above here
	if(obj.gender.checked==true){
		sex=obj.gender.value;
	}		
	else {
		obj.gender.value='f';
		obj.gender.checked=true
		sex='f';
	}					
//... there may be some validation code for other form inputs below here
}
</pre>
<p>The flaw in this is that <b>if the form DOES NOT pass the rest of the validation, you return to a form that has had an input value changed</b>
 ... that would be a problem, but if you can ensure this does not happen
 - like only check this if the rest of the validation passes, or make 
sure to sete it back to the original values if the validation fails - 
then feel free to do this.
</p><p>The second possiblity is:
</p>
<ul><li>Create the "test" input - the checkbox that replaces the radio 
button - with an unused name, the at run-time, create an input with the 
correct name and give it the correct values.
</li></ul>
<p>This is in fact the more common approach, which results in an extra Form value being submitted.
</p>
<a name="INPUT_type.3D.22checkbox.22"></a><h3> <span class="mw-headline">INPUT type="checkbox"</span></h3>
<pre style="background-color:#eeeeee;">&lt;input type="checkbox" name="accept" value="y" title="Do you accept out Terms" class="rad"/&gt;
</pre>
<p><b>Checkbox</b> inputs are tricky since they are an input which may 
or may not be submitted. As we saw with changing a two-radio button 
input to a checkbox, there are both server-side and client-side 
considerations.  See the section above and do it in reverse for changing
 to a radio button.
</p><p>We can also change them to a select.
</p>
<a name="Form_Submission_-_How_it_works_from_a_back-end_perspective"></a><h2> <span class="mw-headline">Form Submission - How it works from a back-end perspective</span></h2>
<p>Let me give you a brief review of how a Form submits, and the 
implications of what is expected on the back-end that may effect 
Template implementation.
</p><p>When a Form submits, the back-end is expecting certain 
information (for this discussion, let's assume all client-side/front-end
 validation has passed) from the Form.  On a normal Form, all inputs 
will be submitted with some value (could be <i>, but that's something) to the Form except for the following:</i>
</p>
<ol><li>Radio buttons - only submitted if one is checked (Which should 
be ensured by client-side checking or defaulting one value as checked)
</li><li>Checkboxes - only submitted if checked.
</li><li>Images that are inputs of type="image" - only submitted if clicked.
</li><li>Submit buttons that are inputs of type="submit" - only submitted if clicked.
</li></ol>
<p>The Radio button is normally not an issue, but wanted to mention it 
just so you are informed.  The rest, however, are issues for us when we 
make changes to the inputs for testing purposes.
</p>
<ul><li>Checkboxes - I mentioned above, we just need to make sure if we 
change it to a radio or select, we don't submit data in the "off" state.
</li></ul>
<ul><li>Images that are inputs of type="image" - This is very important 
and must be accounted for in many instances since the back-end may be 
expecting specific behavior from these inputs to indicate certain user 
behavior.  Let's say I have the following image for the buy button:
</li></ul>
<p><code>&lt;input type="image" name="buy" src="/images/buy.gif" /&gt;</code>
</p><p>If the visitor fills in the Form and clicks on this image, in 
addition to rest of the Form, clicking on this results in the following 
data being posted, more or less:
</p><p><b>buy.x=5&amp;buy.y=9</b>
</p><p>Where the buy.x tells us where in the x-axis the visitor clicked 
on the button, and buy.y tells us where in the y-axis the visitor 
clicked on the button.  So let's say I change this to the follwing 
submit button:
<code>&lt;input type="submit" name="buy" value="yes" /&gt;</code>
</p><p>If the visitor fills in the Form and clicks on this button, in 
addition to rest of the Form, clicking on this results in the following 
data being posted:
</p><p><b>buy=yes</b>
</p><p>and if I change it to a link, which submits the Form as the following:
</p><p><code>&lt;a href="#" onclick="document.forms[0].submit();return false;" &gt;BUY!&lt;/a&gt;</code>
</p><p>If the visitor fills in the Form and clicks on this button, no 
extra data will be sent, in addition to rest of the Form, as a result of
 clicking on this link.
</p><p>Now, if the Form we are testing only has one possible function - to submit the data to buy - then the back-end <b>may not be looking for buy.x and buy.y to show up on the back-end</b>.
  So we may get away with it.  But on most of the pages we work with, in
 addition to the "buy" button, there may be a "sign in" button, and an 
"enter coupon code" button, or an "update cart" button, etc, etc.  
Often, setting each of these buttons as images with different names 
allows the back-end to use a single Form and determnine the function 
selected by the visitor based on which .x and .y pair shows up.  So if 
you make these changes in a template, you need to account for its 
back-end implications.
</p><p>Same goes for a sumbit input changed to an image or link.
</p>
<a name="OPTIMOST-SPECIFIC_FORM_ISSUES"></a><h2> <span class="mw-headline">OPTIMOST-SPECIFIC FORM ISSUES</span></h2>
<p>Here is where we will go over things to remember in terms of implementation.  
</p>
<a name="BIG_GOTCHA.21.21_The_top_things_to_look_when_you_start_...."></a><h3> <span class="mw-headline"><span style="color:#A64242;">BIG GOTCHA!! The top things to look when you start ....</span></span></h3>
<p>Entering this section brings a smile to my face and makes be break 
out in a sweat, both at the same time.  These are probably my favorite 
examples of why the lack of rules in HTML coding can cause enormous 
problems in testing a page.
</p><p>I have added code below that I suggest you put in the browser.  
When you submit each form, it goes through the Form object and stores in
 a string the name, value and type of each element. Next, it stores the 
form "action", form "method", and form "name". Finally, it alerts you 
will all teh information from above, whether or not the submit function 
is still intact, then sumbits the form using the submit() function for 
the Form Object.  Cut and paste it into Homesite and see.
</p>
<pre>&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;How to NOT name Form inputs&lt;/title&gt;
&lt;script&gt;
function checkValidation(obj){
	lst='';
	for(i=0;i&lt;obj.length;i++){
		nm=obj.elements[i].name;
		val=obj.elements[i].value;
		tp=obj.elements[i].type;
		lst+='\nElement '+i+' has the name '+nm+', the value '+val+', and is of type '+tp;
	}
	lst+='\nThe form has the action '+obj.action+',the method '+obj.method+', and the name '+obj.name+'\n\n';
	if(typeof(obj.submit)=="function" || obj.submit.value==null) {
		lst+='\nThe submit function exists - '+typeof(obj.submit)+' so we will now submit';
		alert(lst);
		obj.submit();
	}
	else {
		lst+='\nTurns out obj.submit is not a function, it is a '+typeof(obj.submit)+
		' so we can\'t submit using this function.\nBut we will try to Submit and you will see teh JS error we get';
		alert(lst);
		obj.submit();
	}
	return false;
}
&lt;/script&gt;		
&lt;style&gt;input{display:block;}&lt;/style&gt;	
&lt;/head&gt;
&lt;body&gt;
Form with poorly-named inputs
&lt;form action="http://www.optimost.com/technology/content-generation.php"  name="theForm" method="post" onsubmit="checkValidation(this); return false;" &gt;
&lt;input type="text" name="name" value="Jaime" /&gt;
&lt;input type="text" name="action" value="Golfing" /&gt;
&lt;input type="text" name="method" value="Poorly" /&gt;
&lt;input type="submit" name="submit" /&gt;
&lt;/form&gt;
Form with well-named inputs
&lt;form action="http://www.optimost.com/technology/content-generation.php"  name="theForm1" method="post" onsubmit="checkValidation(this); return false;" &gt;
&lt;input type="text" name="name1" value="Jaime" /&gt;
&lt;input type="text" name="action1" value="Golfing" /&gt;
&lt;input type="text" name="method1" value="Poorly" /&gt;
&lt;input type="submit" name="submit1" /&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The point is that poor naming practive - using any of the attribute 
names defined by the specification for a the Form tag as input names can
 be problematic, but inventive coding can work around all but one.  
Unfortunately, one is irreversible.
</p><p>The one irreversible one is using submit as a variable name.
</p>
<div style="font-size:132%;color:#A64242;border-bottom:1px solid #cccccc;padding:10px 0 5px 0;">"submit" as a variable name - a clickthru disaster</div> 
<p>A customer inadvertantly doing this means you can't submit through the DOM - as in <b>formObj.submit()</b>.  Note that this should <b>never effect the normal operation of the page for the customer before Optimost implementation</b>.
  See, if they happen to name a variable "submit" - most likely an input
 of type="submit" - and then try to submit through the DOM, their QA 
folks will see the problem, tell the web developers, the web developers 
will use another name, and we won't have to deal with it.
</p><p>Problem is that if we are tracking clicks, when we do the 
redirect back to the broswer to post the form after counting the click, 
we recreate the form as the only contents of the page, AND then have an 
onload event to submit the form, as in:
</p>
<pre>&lt;html&gt;
&lt;head&gt;
&lt;/head&gt;
&lt;body onload="f[0].submit();"&gt;
&lt;form action="http://www.optimost.com/technology/content-generation.php"  name="theForm" method="post"&gt;
&lt;input type="hidden" name="name" value="Jaime" /&gt;
&lt;input type="hidden" name="action" value="Golfing" /&gt;
&lt;input type="hidden" name="method" value="Poorly" /&gt;
&lt;input type="hidden" name="submit" /&gt;
&lt;/form&gt;
&lt;SCRIPT LANGUAGE="JavaScript"&gt;
var f = (typeof document.forms == "object")&nbsp;? document.forms&nbsp;: document.getElementsByTagName("form");
&lt;/SCRIPT&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p>So if you stick that in a browser or Homesite, you will get a JS 
error.  If you rename the hidden input "submit" to "submit1", it will 
work.  As I mentioned, there is no workaround, <b>EXCEPT</b> changing 
the name of the input.  The CRM should be informed of the issue by the 
TC, and we can find out if they are amenable to changing the name of 
that input.
</p>
<div style="font-size:132%;color:#A64242;border-bottom:1px solid #cccccc;padding:10px 0 5px 0;">"action" as a variable name - dressing for bad weather</div> 
<p>Basically, you don't get the action by saying <b>formObj.action</b>, instead, you use <b>formObj.attributes.getNamedItem('action').nodeValue</b>.  So here is the new code:
</p>
<pre>&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;How to NOT name Form inputs&lt;/title&gt;
&lt;script&gt;
function checkValidation(obj){
	lst='';
	for(i=0;i&lt;obj.length;i++){
		nm=obj.elements[i].name;
		val=obj.elements[i].value;
		tp=obj.elements[i].type;
		lst+='\nElement '+i+' has the name '+nm+', the value '+val+', and is of type '+tp;
	}
	lst+='\nThe form has the action '+obj.attributes.getNamedItem('action').nodeValue+',the method '+
	obj.attributes.getNamedItem('method').nodeValue+', and the name '+obj.attributes.getNamedItem('name').nodeValue+'\n\n';
	if(typeof(obj.submit)=="function" || obj.submit.value==null) {
		lst+='\nThe submit function exists - '+typeof(obj.submit)+' so we will now submit';
		alert(lst);
		obj.submit();
	}
	else {
		lst+='\nTurns out obj.submit is not a function, it is a '+typeof(obj.submit)+
		' so we can\'t submit using this function.\nBut we will try to Submit and you will see teh JS error we get';
		alert(lst);
		obj.submit();
	}
	return false;
}
&lt;/script&gt;	
&lt;style&gt;input{display:block;}&lt;/style&gt;	
&lt;/head&gt;
&lt;body&gt;
Form with poorly-named inputs
&lt;form action="http://www.optimost.com/technology/content-generation.php"  name="theForm" method="post" onsubmit="checkValidation(this); return false;" &gt;
&lt;input type="text" name="name" value="Jaime" /&gt;
&lt;input type="text" name="action" value="Golfing" /&gt;
&lt;input type="text" name="method" value="Poorly" /&gt;
&lt;input type="submit" name="submit2" /&gt;
&lt;/form&gt;
Form with well-named inputs
&lt;form action="http://www.optimost.com/technology/content-generation.php"  name="theForm1" method="post" onsubmit="checkValidation(this); return false;" &gt;
&lt;input type="text" name="name1" value="Jaime" /&gt;
&lt;input type="text" name="action1" value="Golfing" /&gt;
&lt;input type="text" name="method1" value="Poorly" /&gt;
&lt;input type="submit" name="submit1" /&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p>So always get the value and set the value of the action using <b>formObj.attributes.getNamedItem('action').nodeValue</b>, and all is good.
</p>
<a name="GOTCHA_-_When_changing_the_clickthru_at_runtime_...."></a><h3> <span class="mw-headline"><span style="color:#A64242;">GOTCHA - When changing the clickthru at runtime ....</span></span></h3>
<div style="font-size:132%;color:#75A642;border-bottom:1px solid #cccccc;padding-bottom:10px;">If the method="POST"</div>
<p><span style="font-weight:bold;">Not the "Gotcha".</span>  For a POST,
 it's simple - we figure out what the full-path URL for the action is, 
then append it to the clickthru value through the oppost request 
argument, then make it the action value. 
</p>
<pre>&lt;form action="/technology/content-generation.php"  name="theForm" method="post" &gt;
&lt;input type="text" name="name" value="Jaime" /&gt;
&lt;input type="text" name="action" value="Golfing" /&gt;
&lt;input type="text" name="method" value="Poorly" /&gt;
&lt;input type="submit" name="submit2" /&gt;
&lt;/form&gt;
&lt;script&gt;
//Code to get the full-path URL, both the domain and root..
//For example, http://www.acme.com/optimost/, that is the root, the domain (domn) is http://www.acme.com
if(document.getElementsByTagName('base')[0]&nbsp;!= null){
	var base = document.getElementsByTagName('base')[0];
	var tempLink = document.createElement('a');
	tempLink.href = base.href	
	var path=tempLink.pathname.substr(0,tempLink.pathname.lastIndexOf('/')+1);
	domn = tempLink.protocol + "//" + tempLink.host + "/";
	root = tempLink.protocol+"//" + tempLink.host + "/" + path;
}
else {
	var path=location.pathname.substr(0,location.pathname.lastIndexOf('/')+1);
	domn = location.protocol+"//" + location.host;
	root = location.protocol+"//" + location.host +  path;
}

formObj=document.forms[0];  //I'll assume it's the first form for this test
var formActionObj= formObj.attributes.getNamedItem('action'); //Get the form action attribute the smart way
clickVal="{{$clickthru.formPost.url}}"; //The Optimost clickthru for this form

//Second half, append it to the action.
if(formActionObj!=null) { 
	origAction=formActionObj.nodeValue;
	if(origAction.substr(0,4).toLowerCase()=='http') newPostLink=origAction;
	else if(origAction.substr(0,1)=='/') newPostLink=domn+origAction.substr(1,origAction.length); 
	else newPostLink=root+origAction; 
	formActionObj.nodeValue = clickVal + ((clickVal.indexOf('?')&nbsp;!= -1)?'&amp;':'?') + 'oppost=' + escape(newPostLink);
}
else{
	newPostLink= document.location;
	tmp = clickVal + ((clickVal.indexOf('?')&nbsp;!= -1)?'&amp;':'?') + 'oppost=' + escape(newPostLink);
	tmp2 = formObj.setAttribute('action',tmp);
}
alert(formObj.attributes.getNamedItem('action').nodeValue);  //Just for test purposes
&lt;/script&gt;

</pre>
<div style="font-size:132%;color:#A64242;border-bottom:1px solid #cccccc;padding-bottom:10px;">Change the form action of a GET form</div>
<p><span style="color:#A64242;font-weight:bold;">This is the "Gotcha".</span>
 For a GET, it's a little bit more work.  First, like the POST, we 
figure out what the full-path URL for the action is. But, for a GET, 
instead of appending it to the action value, we need to actually <b>add it as a hidden input</b>.
</p><p>So in the code example above, the first half of the code is the same.  But the second half is different, more like:
</p>
<pre>//Second half, add the click to the Form action and add the hidden input to the form
INSIDE_FORM=false;  //The form is closed, set to false
if(formActionObj!=null) { 
	origAction=formActionObj.nodeValue;
	if(origAction.substr(0,4).toLowerCase()=='http') newPostLink=origAction;
	else if(origAction.substr(0,1)=='/') newPostLink=domn+origAction.substr(1,origAction.length); 
	else newPostLink=root+origAction; 
	formActionObj.nodeValue = clickVal;  //Add the click to the Form action
	opSetHiddenInput(INSIDE_FORM,formObj,'oppost',newPostLink); //Set the Hidden input one of two ways, depending on where this code is.
}
else{
	newPostLink= document.location;
	tmp2 = formObj.setAttribute('action',clickVal );
	opSetHiddenInput(INSIDE_FORM,formObj,'oppost',newPostLink); //Set the Hidden input one of two ways, depending on where this code is.
}
</pre>
<p>so that's the first "Gotcha" - hidden input, not appended to the action - <b>AND</b> we have to define a function to account for the second "Gotcha" - where we are dictated how we add that hidden input:
</p>
<pre>//Set the Hidden input as a document.write(if we are inside form) or as a node appended to the form (if the form is closed above us).
function opSetHiddenInput(inForm,obj,requestArg,newPostLink){
	if(inForm){
		document.write('&lt;input type="hidden" name="'+requestArg+'" value="'+newPostLink+'" /&gt;');
	}
	else{
		var newInput=document.createElement('input');
		newInput.setAttribute('type','hidden');
		newInput.setAttribute('name',requestArg);
		newInput.setAttribute('value',newPostLink);
		obj.appendChild(newInput);
	}
}
</pre>
<p>The issue is that where this module is in relation to form - inside 
or outside of it - changed how we have to insert this hidden input.  If 
we are outside the form - it has beenopened and closed above the module 
call - than we have to "append" it to the form by adding it to through 
the DOM. BUT if we are in the middle of the form - the opening form tag 
is BEFORE our module call and the closing form tag is AFTER our module 
call - then we need to add, not append it, by just document.write-ing it
 out.
</p><p>In this case, the form is closed, so we append it.
</p>
<a name="Where_are_the_Form_tags_in_relation_to_the_OPTIMOST_code.3F"></a><h3> <span class="mw-headline">Where are the Form tags in relation to the OPTIMOST code?</span></h3>
<p>Before we answer this, we need to review how our code works and how 
the DOM works. This is extremely important because DOM issues account 
for most of the cross-browser inconsistencies we deal with (CSS aside). 
 And if you are a web developer you need to understand this if you want 
to be anything more than a hack.  
</p><p><br>
</p>
<div class="warningbox">
<a name="Caveat_6"></a><h3> <span class="mw-headline">Caveat</span></h3>
<p>HTML is forgiving - way too forgiving to facilitate good programming.
  When I first used HTML in Grad school in 1996, I loved that you 
didn't have to COMPILE it.... WOW!!!!!  I was use to C and I spent a lot
 of debug time getting it to run without errors.  There is in fact, 
no such thing as an HTML error in terms of the page crashing.  This 
pernicious forgiveness means HTML developers can create garbage code 
in record time. 
</p><p>Since I cannot pass a law forcing HTML to enforce validation 
rules as XML does (called "well-formed" code), I can tell my TCs to pay 
attention to our customer's pages and make sure the code is 
"well-formed" so that it will work with Optimost.
</p>
</div>
<p>When we test a page, we cut the page up into "modules" that we are 
testing.  Although we can have many modules and have a single, unified 
test, each module still needs to be a <b>"single unit from"</b> a DOM perspective.  This is because we encapsulate each module in <b>span</b>
 tags, and that requires each module to be a valid HTML cell.  A valid 
HTML cell contain an equal number of nested opening and closing tags.  
And for a <b>table</b> structure, <b>span</b> tags can only be put inside a <b>td</b> or <b>th</b> tag (a cell).
</p><p>So for Forms, this means that ANY MODULE IN WHICH WE ARE TESTING 
FORM ELEMENTS must contain both Form tags - &lt;form&gt; .... 
&lt;/form&gt; - OR neither tag.  <b>NO EXCEPTIONS!!!</b>  If a customer 
has a page that is a valid HTML cell but has has an opening or closing 
tag inside of it - but not both - we need to explain that's not how we 
roll.  So always be looking out for this.
</p><p>Let's go over all the combinations to better understand this.  First, there are 3 first-level possiblities:
</p>
<ol><li>The Form and its tags are entirely inside one of the modules
</li><li>The Form tags are entirely outside all the modules 
</li><li>There is one of the Form tags inside one of the modules
</li></ol>
<p>1 and 2 are fine, 3 will most likely be a big problem.  Let's go over
 the possibilites within #3, of which there also happen to be 3.
</p>
<ol><li>There is only one module - it will be a problem.
</li><li>There are multiple modules, and the tag is in the module where we edit the form elements - it will be a problem.
</li><li>There are multiple modules, and the tag is NOT the module where we edit the form elements - we can work with this.
</li></ol>
<p>This should clarify it - the issue is when we are basically not 
"sure" if the form is in the DOM or not.  This can get varied results 
from browser to browser, so it's a no-no.
</p>
<a name="How_do_we_add.2Fmodify_elements_in_the_Form_if_its_tags_and_elements_are_entirely_INSIDE_one_of_the_modules.3F"></a><h3> <span class="mw-headline">How do we add/modify elements in the Form if its tags and elements are entirely INSIDE one of the modules?</span></h3>
<p>We saw in the <span style="color:#A64242;font-weight:bold;">"GOTCHA - When changing the clickthru at runtime ...."</span>
 above, the GET Form submission requires a hidden input to be added, and
 when our module is INSIDE the Form, we use a document.write.  So those 
same principles apply here.
</p>
<a name="How_do_we_add.2Fmodify_elements_in_the_Form_tags_are_entirely_OUTSIDE_one_of_the_modules.3F"></a><h3> <span class="mw-headline">How do we add/modify elements in the Form tags are entirely OUTSIDE one of the modules?</span></h3>
<p>The most common situation. And we saw in the <span style="color:#A64242;font-weight:bold;">"GOTCHA - When changing the clickthru at runtime ...."</span>
 above, the GET Form submission requires a hidden input to be added, and
 when we are OUTSIDE the Form, we apapend it via the DOM.  So those same
 principles apply here.
</p><p><br>
</p>
<a name="So_what_happens_when_the_test_plan_specifies_we_change_a_form_element_from_one_type_to_another.3F"></a><h3> <span class="mw-headline">So what happens when the test plan specifies we change a form element from one type to another?</span></h3>
<p>Let me give you some guidelines on this, but also remember that I may not cover every single case, so please, <b>please</b>, think through the implications of changes you make to a Form.
</p>
<div style="font-size:132%;color:#75A642;border-bottom:1px solid #cccccc;padding-bottom:10px;">Changing an image input to a link</div>
<p>Clicking on the image will result in name.x and name.y being 
submitted.  So I would suggest adding an onclick event to the link to:
</p>
<ol><li>Appending two new hidden inputs - name.x and name.y - to the form.
</li><li>Once added, submit the form.
</li></ol>
<p>So let's say we are replacing this input:
</p>
<pre>&lt;input type="image" name="buy" src="/images/buy.gif" /&gt;
</pre>
<p>with a link, assuming the Form is the first Form on the page, we would then have to do the following:
</p>
<pre>&lt;a href="#" onclick="opAddImageInput('buy.x','hidden','1');opAddImageInput('buy.y','hidden','1');document.forms[0].submit();"&gt;Buy!&lt;/a&gt;
&lt;script&gt;
function opAddImageInput(name,type,value){
	var f=document.forms[0];
	var newInput=document.createElement('input');
	newInput.setAttribute('type',type);
	newInput.setAttribute('name',name);
	newInput.setAttribute('value',value);
	f.appendChild(newInput);
}
&lt;/script&gt;
</pre>
<p>Now, the one issue here is that we don't want to add the hidden 
inputs UNLESS the click passes all client-side validation. We'd hate for
 the user to click on the link to buy, then it turns out there is some 
client-side validation error, then have the visitor decide instead to 
click on the "update cart" button instead, and now that buy.x and buy.y 
are set, the back-end thinks the visitor hit the "buy" button, not the 
"update cart" button.  The point is you need to be intelligent when 
adding these changes.
</p>
<a name="See_Also"></a><h2> <span class="mw-headline">See Also</span></h2>
<ul><li><a href="http://wiki.interwoven.com/optimost/Appending_Elements_to_a_Form" title="Appending Elements to a Form">Appending Elements to a Form</a>
</li><li><a href="http://wiki.interwoven.com/optimost/Focus_on_the_First_Element_in_a_Form" title="Focus on the First Element in a Form">Focus on the First Element in a Form</a>
</li><li><a href="http://wiki.interwoven.com/optimost/Getting_Radio_Button_and_Checkbox_Values" title="Getting Radio Button and Checkbox Values">Getting Radio Button and Checkbox Values</a>
</li><li><a href="http://wiki.interwoven.com/optimost/Form_Replication" title="Form Replication">Form Replication</a>
</li></ul>
<hr>
<p>Back to <a href="http://wiki.interwoven.com/optimost/Technical_Consulting" class="mw-redirect" title="Technical Consulting">Technical Consulting</a>
</p>
<!-- 
NewPP limit report
Preprocessor node count: 155/1000000
Post-expand include size: 3607/2097152 bytes
Template argument size: 3238/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key optimost_wiki:pcache:idhash:55-0!1!0!!en!2!edit=0 and timestamp 20130816145242 -->
<div class="printfooter">
Retrieved from "<a href="http://wiki.interwoven.com/optimost/Forms">http://wiki.interwoven.com/optimost/Forms</a>"</div>
			<div id="catlinks" class="catlinks"><div id="mw-normal-catlinks"><a href="http://wiki.interwoven.com/optimost/Special:Categories" title="Special:Categories">Category</a>: <span dir="ltr"><a href="http://wiki.interwoven.com/optimost/Category:Forms" title="Category:Forms">Forms</a></span></div></div>			<!-- end content -->
			<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="http://wiki.interwoven.com/optimost/Forms" title="View the content page [alt-shift-c]" accesskey="c">Page</a></li>
				 <li id="ca-talk" class="new"><a href="http://wiki.interwoven.com/opwiki/index.php?title=Talk:Forms&amp;action=edit" title="Discussion about the content page [alt-shift-t]" accesskey="t">Discussion</a></li>
				 <li id="ca-viewsource"><a href="http://wiki.interwoven.com/opwiki/index.php?title=Forms&amp;action=edit" title="This page is protected.
You can view its source. [alt-shift-e]" accesskey="e">View source</a></li>
				 <li id="ca-history"><a href="http://wiki.interwoven.com/opwiki/index.php?title=Forms&amp;action=history" title="Past versions of this page. [alt-shift-h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-anonuserpage"><a href="http://wiki.interwoven.com/optimost/User:10.26.10.11" title="The user page for the ip you're editing as [alt-shift-.]" accesskey="." class="new">10.26.10.11</a></li>
				<li id="pt-anontalk"><a href="http://wiki.interwoven.com/optimost/User_talk:10.26.10.11" title="Discussion about edits from this ip address [alt-shift-n]" accesskey="n" class="new">Talk for this IP</a></li>
				<li id="pt-anonlogin"><a href="http://wiki.interwoven.com/opwiki/index.php?title=Special:UserLogin&amp;returnto=Forms" title="You are encouraged to log in, it is not mandatory however. [alt-shift-o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://wiki.interwoven.com/opwiki/images/1/18/Logo_optimost.gif);" href="http://wiki.interwoven.com/optimost/Home" title="Visit the Main Page [alt-shift-z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/optimost/Special:Search" id="searchform"><div>
				<input id="searchInput" name="search" title="Search Optimost Wiki [alt-shift-f]" accesskey="f" type="text">
				<input name="go" class="searchButton" id="searchGoButton" value="Go" title="Go to a page with this exact name if exists" type="submit">&nbsp;
				<input name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search the pages for this text" type="submit">
			</div></form>
		</div>
	</div>
	<div class="generated-sidebar portlet" id="p-navigation">
		<h5>Navigation</h5>
		<div class="pBody">
			<ul>
				<li id="n-mainpage"><a href="http://wiki.interwoven.com/optimost/Home" title="Visit the Main Page [alt-shift-z]" accesskey="z">Home</a></li>
				<li id="n-recentchanges"><a href="http://wiki.interwoven.com/optimost/Special:RecentChanges" title="The list of recent changes in the wiki. [alt-shift-r]" accesskey="r">Recent changes</a></li>
				<li id="n-randompage"><a href="http://wiki.interwoven.com/optimost/Special:Random" title="Load a random page [alt-shift-x]" accesskey="x">Random page</a></li>
				<li id="n-Accounts"><a href="http://wiki.interwoven.com/optimost/Accounts">Accounts</a></li>
				<li id="n-Glossary"><a href="http://wiki.interwoven.com/optimost/Glossary">Glossary</a></li>
				<li id="n-help"><a href="http://wiki.interwoven.com/optimost/Help:Contents" title="The place to find out.">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="generated-sidebar portlet" id="p-departments">
		<h5>departments</h5>
		<div class="pBody">
			<ul>
				<li id="n-Analytics"><a href="http://wiki.interwoven.com/optimost/Analytics_%28Department%29">Analytics</a></li>
				<li id="n-Client-Services"><a href="http://wiki.interwoven.com/optimost/Category:Client_Services">Client Services</a></li>
				<li id="n-Documentation"><a href="http://wiki.interwoven.com/optimost/Documentation">Documentation</a></li>
				<li id="n-Engineering"><a href="http://wiki.interwoven.com/optimost/Engineering">Engineering</a></li>
				<li id="n-Quality-Assurance"><a href="http://wiki.interwoven.com/optimost/Category:Quality_Assurance">Quality Assurance</a></li>
				<li id="n-Technical-Consulting"><a href="http://wiki.interwoven.com/optimost/Technical_consulting">Technical Consulting</a></li>
				<li id="n-Training-.26-Education"><a href="http://wiki.interwoven.com/optimost/Training_and_education">Training &amp; Education</a></li>
			</ul>
		</div>
	</div>
	<div class="generated-sidebar portlet" id="p-links">
		<h5>links</h5>
		<div class="pBody">
			<ul>
				<li id="n-Optimost-Console"><a href="http://asp.optimost.com/agency">Optimost Console</a></li>
				<li id="n-Optimost-Public-Site"><a href="http://www.interwoven.com/optimost">Optimost Public Site</a></li>
				<li id="n-Netspeed"><a href="http://netspeed/">Netspeed</a></li>
				<li id="n-SalesSite"><a href="http://salessite/">SalesSite</a></li>
				<li id="n-WorkSite"><a href="https://worksitemp.interwoven.com/worksitemp/link//V3/INTERWOVEN/C/F$217/C$14610/">WorkSite</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="http://wiki.interwoven.com/optimost/Special:WhatLinksHere/Forms" title="List of all wiki pages that link here [alt-shift-j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="http://wiki.interwoven.com/optimost/Special:RecentChangesLinked/Forms" title="Recent changes in pages linked from this page [alt-shift-k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="http://wiki.interwoven.com/optimost/Special:Upload" title="Upload files [alt-shift-u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="http://wiki.interwoven.com/optimost/Special:SpecialPages" title="List of all special pages [alt-shift-q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="http://wiki.interwoven.com/opwiki/index.php?title=Forms&amp;printable=yes" title="Printable version of this page [alt-shift-p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="http://wiki.interwoven.com/opwiki/index.php?title=Forms&amp;oldid=4284" title="Permanent link to this version of the page">Permanent link</a></li>			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="Forms%20-%20Optimost%20Wiki_files/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki"></a></div>
			<ul id="f-list">
				<li id="lastmod"> This page was last modified on 22 October 2009, at 14:38.</li>
				<li id="viewcount">This page has been accessed 241 times.</li>
				<li id="privacy"><a href="http://wiki.interwoven.com/optimost/Optimost_Wiki:Privacy_policy" title="Optimost Wiki:Privacy policy">Privacy policy</a></li>
				<li id="about"><a href="http://wiki.interwoven.com/optimost/Optimost_Wiki:About" title="Optimost Wiki:About">About Optimost Wiki</a></li>
				<li id="disclaimer"><a href="http://wiki.interwoven.com/optimost/Optimost_Wiki:General_disclaimer" title="Optimost Wiki:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served in 0.330 secs. -->
</body></html>