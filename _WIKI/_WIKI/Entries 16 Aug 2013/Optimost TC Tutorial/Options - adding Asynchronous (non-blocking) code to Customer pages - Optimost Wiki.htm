<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" dir="ltr" lang="en"><head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<meta name="generator" content="MediaWiki 1.13.1">
		<meta name="keywords" content="Options - adding Asynchronous (non-blocking) code to Customer pages,CORS - a &quot;higher security&quot; approach to MVT,Creating a &quot;multi-cookie&quot; - putting all the Optimost &quot;cookies&quot; into a single cookie,Cross-domain cookie workaround,Implementation considerations,MVT vs Concept A/B/n experiments,Making page changes - AJAX,Making page changes - Gotchas and Issues,Making page changes - complexities,Making page changes - examples,Multi-page experiments">
		<link rel="shortcut icon" href="http://wiki.interwoven.com/favicon.ico">
		<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.interwoven.com/opwiki/opensearch_desc.php" title="Optimost Wiki (en)">
		<link rel="alternate" type="application/rss+xml" title="Optimost Wiki RSS Feed" href="http://wiki.interwoven.com/opwiki/index.php?title=Special:RecentChanges&amp;feed=rss">
		<link rel="alternate" type="application/atom+xml" title="Optimost Wiki Atom Feed" href="http://wiki.interwoven.com/opwiki/index.php?title=Special:RecentChanges&amp;feed=atom">
		<title>Options - adding Asynchronous (non-blocking) code to Customer pages - Optimost Wiki</title>
		<style type="text/css" media="screen, projection">/*<![CDATA[*/
			@import "/opwiki/skins/common/shared.css?164";
			@import "/opwiki/skins/monobook/main.css?164";
		/*]]>*/</style>
		<link rel="stylesheet" type="text/css" media="print" href="Options%20-%20adding%20Asynchronous%20%28non-blocking%29%20code%20to%20Customer%20pages%20-%20Optimost%20Wiki_files/commonPrint.css">
		<!--[if lt IE 5.5000]><style type="text/css">@import "/opwiki/skins/monobook/IE50Fixes.css?164";</style><![endif]-->
		<!--[if IE 5.5000]><style type="text/css">@import "/opwiki/skins/monobook/IE55Fixes.css?164";</style><![endif]-->
		<!--[if IE 6]><style type="text/css">@import "/opwiki/skins/monobook/IE60Fixes.css?164";</style><![endif]-->
		<!--[if IE 7]><style type="text/css">@import "/opwiki/skins/monobook/IE70Fixes.css?164";</style><![endif]-->
		<!--[if lt IE 7]><script type="text/javascript" src="/opwiki/skins/common/IEFixes.js?164"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
		
		<script type="text/javascript">/*<![CDATA[*/
var skin = "monobook";
var stylepath = "/opwiki/skins";
var wgArticlePath = "/optimost/$1";
var wgScriptPath = "/opwiki";
var wgScript = "/opwiki/index.php";
var wgVariantArticlePath = false;
var wgActionPaths = [];
var wgServer = "http://wiki.interwoven.com";
var wgCanonicalNamespace = "";
var wgCanonicalSpecialPageName = false;
var wgNamespaceNumber = 0;
var wgPageName = "Options_-_adding_Asynchronous_(non-blocking)_code_to_Customer_pages";
var wgTitle = "Options - adding Asynchronous (non-blocking) code to Customer pages";
var wgAction = "view";
var wgArticleId = "1128";
var wgIsArticle = true;
var wgUserName = null;
var wgUserGroups = null;
var wgUserLanguage = "en";
var wgContentLanguage = "en";
var wgBreakFrames = false;
var wgCurRevisionId = "6920";
var wgVersion = "1.13.1";
var wgEnableAPI = true;
var wgEnableWriteAPI = false;
var wgRestrictionEdit = [];
var wgRestrictionMove = [];
/*]]>*/</script>
                
		<script type="text/javascript" src="Options%20-%20adding%20Asynchronous%20%28non-blocking%29%20code%20to%20Customer%20pages%20-%20Optimost%20Wiki_files/wikibits.js"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="Options%20-%20adding%20Asynchronous%20%28non-blocking%29%20code%20to%20Customer%20pages%20-%20Optimost%20Wiki_files/ajax.js"></script>
		<script type="text/javascript" src="Options%20-%20adding%20Asynchronous%20%28non-blocking%29%20code%20to%20Customer%20pages%20-%20Optimost%20Wiki_files/index.php"><!-- site js --></script><script type="text/javascript" src="Options%20-%20adding%20Asynchronous%20%28non-blocking%29%20code%20to%20Customer%20pages%20-%20Optimost%20Wiki_files/index_002.php"></script>
		<style type="text/css">/*<![CDATA[*/
@import "/opwiki/index.php?title=MediaWiki:Common.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=18000";
@import "/opwiki/index.php?title=MediaWiki:Monobook.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=18000";
@import "/opwiki/index.php?title=-&action=raw&gen=css&maxage=18000";
/*]]>*/</style>
	</head>
<body class="mediawiki ns-0 ltr page-Options_-_adding_Asynchronous_non-blocking_code_to_Customer_pages">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
				<h1 class="firstHeading">Options - adding Asynchronous (non-blocking) code to Customer pages</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Optimost Wiki</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<hr>
<p>&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Optimost_TC_Tutorial" title="Optimost TC Tutorial">Optimost TC Tutorial</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Optimost_Tutorial_Presentations" title="Optimost Tutorial Presentations">Optimost Tutorial Presentations</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Optimost_Implementation" title="Optimost Implementation">Optimost Implementation</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Implementation_considerations" title="Implementation considerations">Implementation considerations</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Making_page_changes_-_examples" title="Making page changes - examples">Making page changes - examples</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Making_page_changes_-_complexities" title="Making page changes - complexities">Making page changes - complexities</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Making_page_changes_-_AJAX" title="Making page changes - AJAX">Making page changes - AJAX</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Page_Code_and_Trial_Code" title="Page Code and Trial Code">Page Code and Trial Code</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Options_-_how_to_add_Optimost_code_to_Customer_pages" title="Options - how to add Optimost code to Customer pages">Options - how to add Optimost code to Customer pages</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Options_-_Global_Code_on_Customer_pages" title="Options - Global Code on Customer pages">Options - Global Code on Customer pages</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Optimost_Trial_Code_js_call_-_why_blocking_vs._non-blocking" title="Optimost Trial Code js call - why blocking vs. non-blocking">Optimost Trial Code js call - why blocking vs. non-blocking</a>
&nbsp;☀&nbsp;<strong class="selflink">Options - adding Asynchronous (non-blocking) code to Customer pages</strong>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Optimost_Tracking" title="Optimost Tracking">Optimost Tracking</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Trial_Code_%26_Counter_Code_calls_-_details" title="Trial Code &amp; Counter Code calls - details">Trial Code &amp; Counter Code calls - details</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Server_to_Server_-_Creating_a_Template_using_XML" title="Server to Server - Creating a Template using XML">Server to Server - Creating a Template using XML</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/MVT_vs_Concept_A/B/n_experiments" title="MVT vs Concept A/B/n experiments">MVT vs Concept A/B/n experiments</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Optimost_Debugging" title="Optimost Debugging">Optimost Debugging</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Making_page_changes_-_Gotchas_and_Issues" title="Making page changes - Gotchas and Issues">Making page changes - Gotchas and Issues</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Multi-page_experiments" title="Multi-page experiments">Multi-page experiments</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Optimost_Creative_Serving_network" title="Optimost Creative Serving network">Optimost Creative Serving network</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Testing_and_Data_Analysis" title="Testing and Data Analysis">Testing and Data Analysis</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Testing_and_Data_Analysis_II" title="Testing and Data Analysis II">Testing and Data Analysis II</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Testing_and_the_Agency_Console" title="Testing and the Agency Console">Testing and the Agency Console</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/CORS_-_a_%22higher_security%22_approach_to_MVT" title="CORS - a &quot;higher security&quot; approach to MVT">CORS - a "higher security" approach to MVT</a>
<br>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Cross-domain_cookie_workaround" title="Cross-domain cookie workaround">Cross-domain cookie workaround</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Creating_a_%22multi-cookie%22_-_putting_all_the_Optimost_%22cookies%22_into_a_single_cookie" title="Creating a &quot;multi-cookie&quot; - putting all the Optimost &quot;cookies&quot; into a single cookie">Creating a "multi-cookie" - putting all the Optimost "cookies" into a single cookie</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Selector-based_Content_modifier_and_Click_Tracking_Code" title="Selector-based Content modifier and Click Tracking Code">Selector-based Content modifier and Click Tracking Code</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Removing_CSS/STYLE_from_the_DOM_for_A/B_or_MVT_concept_tests" title="Removing CSS/STYLE from the DOM for A/B or MVT concept tests">Removing CSS/STYLE from the DOM for A/B or MVT concept tests</a>
</p>
<hr>
<p>More customers want to deploy the Optimost code as non-blocking or 
"Asynchronously".  Here is an example of what we did on a POC that 
required "Asynchronous" Global Code
</p>
<table id="toc" class="toc" summary="Contents"><tbody><tr><td><div id="toctitle"><h2>Contents</h2> <span class="toctoggle">[<a href="javascript:toggleToc()" class="internal" id="togglelink">hide</a>]</span></div>
<ul>
<li class="toclevel-1"><a href="#Background"><span class="tocnumber">1</span> <span class="toctext">Background</span></a></li>
<li class="toclevel-1"><a href="#Deployment_Scenario"><span class="tocnumber">2</span> <span class="toctext">Deployment Scenario</span></a>
<ul>
<li class="toclevel-2"><a href="#Changes_to_WIKI_entry_March_2013"><span class="tocnumber">2.1</span> <span class="toctext">Changes to WIKI entry March 2013</span></a></li>
<li class="toclevel-2"><a href="#Deployment_Considerations"><span class="tocnumber">2.2</span> <span class="toctext">Deployment Considerations</span></a></li>
<li class="toclevel-2"><a href="#Code_Changes_to_the_Global_Code"><span class="tocnumber">2.3</span> <span class="toctext">Code Changes to the Global Code</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Page_Code.2FSelector_Code_changes"><span class="tocnumber">3</span> <span class="toctext">Page Code/Selector Code changes</span></a></li>
<li class="toclevel-1"><a href="#Global_Code_changes"><span class="tocnumber">4</span> <span class="toctext">Global Code changes</span></a>
<ul>
<li class="toclevel-2"><a href="#CAVEAT_EMPTOR_-_Any_functions_that_are_meant_to_execute_in_the_module"><span class="tocnumber">4.1</span> <span class="toctext">CAVEAT EMPTOR - Any functions that are meant to execute in the module</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Module_Code_changes"><span class="tocnumber">5</span> <span class="toctext">Module Code changes</span></a></li>
<li class="toclevel-1"><a href="#Template_Code_changes"><span class="tocnumber">6</span> <span class="toctext">Template Code changes</span></a>
<ul>
<li class="toclevel-2"><a href="#NO_accidental_document.write.2C_please"><span class="tocnumber">6.1</span> <span class="toctext">NO accidental document.write, please</span></a></li>
<li class="toclevel-2"><a href="#The_Template_Code_additions"><span class="tocnumber">6.2</span> <span class="toctext">The Template Code additions</span></a></li>
</ul>
</li>
</ul>
</td></tr></tbody></table><script type="text/javascript"> if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script>
<a name="Background"></a><h2> <span class="mw-headline">Background</span></h2>
<p>Go to these wiki entries for more information:
</p>
<ol><li>Explaining blocking vs non-blocking - <a href="http://wiki.interwoven.com/optimost/Optimost_Trial_Code_js_call_-_why_blocking_vs._non-blocking" title="Optimost Trial Code js call - why blocking vs. non-blocking">Optimost Trial Code js call - why blocking vs. non-blocking</a>
</li><li>Explaining how to modify the Page Code and Trial code to make in non-blocking - <a href="http://wiki.interwoven.com/optimost/Page_Code_and_Trial_Code" title="Page Code and Trial Code">Page Code and Trial Code</a> - look for <b>Non-blocking or Asynchronous calls:..</b> at the bottom of the page.
</li><li>Explaining how our Global Code works - <a href="http://wiki.interwoven.com/optimost/Options_-_Global_Code_on_Customer_pages" title="Options - Global Code on Customer pages">Options - Global Code on Customer pages</a>
</li></ol>
<a name="Deployment_Scenario"></a><h2> <span class="mw-headline">Deployment Scenario</span></h2>
<p>We sent standard Global Code to a customer for a deployment.  We hear
 back it is not working, and then we are told we need to give them <b>"Asynchronous Code"</b>.  So I sent an email with these 3 bullet points
</p>
<ul><li>Our best practices recommendation is to place the Optimost 
Global Code above any potential test areas so we can hide the test areas
 before we make the necessary MVT changes, then unhide it after the 
changes are made.  This avoids the “flicker” of the control page 
changing.  Not Asynchronous.
</li><li>If by Asynchronous you mean pure AJAX, Optimost cannot do AJAX 
with a customer because we are in a different domain than the test page,
 so pure AJAX cannot be done.
</li><li>If by Asyncrhonous you mean loadable at any time, including 
after page load, the answer is yes.  We have a version of Global Code 
that removes any document.write for the script tags and adds those tags 
directly to the DOM to allow for async load, including after page-load 
deployment .   We have done this, but because of the flicker issue is 
not our standard deployment methodology.   If this is what you would 
like, we can supply code this version of the Global Code.
</li></ul>
<p>The customer verified it was scenario #3 with the code being loaded at DOM ready.
</p>
<a name="Changes_to_WIKI_entry_March_2013"></a><h3> <span class="mw-headline">Changes to WIKI entry March 2013</span></h3>
<p>This page was originally written for the scenario above as a POC in 
July 2012.  Then in March 2013 a customer wanted us to change a live 
deployment to Asynchronous.  Although the considerations above still 
apply, some code has been changed as we streamlined the content for this
 deployment.
</p>
<a name="Deployment_Considerations"></a><h3> <span class="mw-headline">Deployment Considerations</span></h3>
<p>So now we have a very different scenario for deployment and have to 
consider the following differences from our standard (best-practices) 
deployment.
</p>
<ol><li>If you are triggering Code after page load - which include DOM ready - you cannot have <b>document.write</b> in your code.  
<ul><li>So you need to make all <b>Modular Web Page Snippets</b> have <b>"Define Modules"</b> set to <b>"After Document Load"</b>.  
</li><li><b>Inline Web Page Snippets</b> work fine out of the box, but you will rarely use that "module-less" subject type.
</li></ul>
</li><li>You also need to make sure there are no <b>document.write</b> in your code.  This means not only no <b>document.write</b>
 in your javascript, but make sure there is no HTML - no &lt;style&gt; 
blocks, no &lt;link&gt; tags, no raw html. HTML gets turned into <b>document.write</b> blocks, so make sure you do pure javascript.
</li><li>In a Standard deployment, the Trial Code executes at the top of
 the page, and the Module Code executes at the bottom, with a bunch of 
rendered customer HTML in between.  This guarantees that the module will
 exist before the Module Code - ie. the module has been created by the 
code returning from the Trial Code call. In this deployment, we are not 
sure when the Trial Code call will be made with respect to when the 
Module Code will be executed.  So now we have to worry about the module 
NOT being called.
</li><li>Now we can't <b>reliably</b> do the hide/unhide of the test area, so we may have to deal with flicker issues.  
</li></ol>
<a name="Code_Changes_to_the_Global_Code"></a><h3> <span class="mw-headline">Code Changes to the Global Code</span></h3>
<p>With this Asynchronous deployment, I have to account for 3 changes in the process
</p>
<ol><li>The script tags are now added to the DOM versus being rendered as HTML.
</li><li>I cannot have the <b>document.write</b> javascript commands 
anywhere in our code - Page Code, Selector Code, Global Code, or 
Template.  In the template, I must be extra careful not to accidentally 
add any HTML code, for it will result in a <b>document.write</b> being added.
</li><li>I will know have variable in execution order:
<ul><li>In a Standard Deployment, the execution order is:
<ul><li>Page Code-Selector Code, Global Code, Trial Code, Module Code
</li></ul>
</li><li>In an Asynchronous Deployment, the execution order is:
<ul><li>Page Code-Selector Code, Global Code, Trial Code, BUT with Module Code potentially coming first, last, or somewhere in between.
</li></ul>
</li></ul>
</li></ol>
<p>So we account for these changes as follows:
</p>
<a name="Page_Code.2FSelector_Code_changes"></a><h2> <span class="mw-headline">Page Code/Selector Code changes</span></h2>
<p>We make the following changes
</p>
<ol><li>So we add a few functions and values to <b>optimost</b> object:
<ul><li><b>optimost.RXH</b>  - Version of <b>optimost.R</b> with no <b>document.write</b>.
</li><li><b>optimost.XH</b>  - Replaces the <b>document.write</b> in <b>optimost.R</b>
</li><li><b>optimost.isIE6</b> - is this IE6
</li><li><b>optimost.moduleNotExecuted</b> - an object to store the modules called by <b>optimost.displayModule</b>
 but not yet defined.  This accounts for when the Module Code is 
executed after the Global Code is returned, BUT before the trial code 
call is returned.
</li><li><b>optimost.asyncCheck</b> - a function called at the bottom of the setup block of any template running in an asynch implementation - <b>this call must be added by the TC to each template</b>.
  We pass in an array with the modules for that template, and it figures
 out if the Module Code called them already - ie tried to call them 
BEFORE they existed.  If that is the case, they are called here.
</li></ul>
</li><li>And we modify one existing function in the <b>optimost</b> object:
<ul><li><b>optimost.displayModule</b> - A standard Page Code function 
the checks to see "if" the module requested exists as a function, and if
 so, executes it. Done.  However, we modify it so that when that "if" is
 false, we add an "else" condition that adds the module to the object <b>optimost.moduleNotExecuted</b> and sets it to <b>true</b>.
</li></ul>
</li><li>Finally, we add the Global Code call as a script tag added to the DOM, not as a script tag inside a <b>document.write</b>.
</li></ol>
<p>Here is the new code with comments around the additions
</p>
<pre>&lt;!-- OPTIMOST PAGE CODE/SELECTOR CODE V2.8 - Copyright 2002-2012 Autonomy Optimost --&gt;
&lt;script type="text/javascript"&gt;
var optimost={A:{},C:{},D:document,L:document.location,M:[],Q:{},T:new Date(),U:'',V:'2.7',Enabled:true,ST:"script",SA:
{"type":"text/javascript"},I:function(){var s=this.L.search;var c=this.D.cookie;if(s.length&gt;3){for(var a=s.substring(1)
.split("&amp;"),i=0,l=a.length;i&lt;l;i++){var p=a[i].indexOf("=");if(p&gt;0)this.Q[a[i].substring(0,p)]=unescape(a[i].substring(
p+1));}}if(c.length&gt;3){for(var a=c.split(";"),i=0,b=a.length;i&lt;b;i++){var v=a[i].split("=");while(v[0].substring(0,
1)==" ")v[0]=v[0].substring(1,v[0].length);if(v.length==2)this.C[v[0]]=unescape(v[1]);}}},B:function(){var n;this.A={
};var _o=this;this.A.D_ts=Math.round(_o.T.getTime()/1000);this.A.D_tzo=_o.T.getTimezoneOffset();this.A.D_loc=_o.L.protocol+
"//"+_o.L.hostname+_o.L.pathname;this.A.D_ckl=_o.D.cookie.length;this.A.D_ref=_o.D.referrer;if(typeof optrial=="object")
for(n in optrial)this.A[n]=optrial[n];for(n in this.Q)this.A[n]=this.Q[n];for(n in this.C)if(n.substring(0,2)=="op")this.A[n]=
this.C[n];},S:function(){var q='';for(var n in this.A)if(this.A[n]!=null &amp;&amp; this.A[n]!="")q+=(q.length&gt;0?"&amp;":(this.U.indexOf(
"?")&gt;0?"&amp;":"?"))+n+"="+escape(this.A[n]);return this.U+q;},SC:function(n,v,e,d){var de=new Date();de.setTime(
de.getTime()+e * 1000);this.D.cookie=n+"="+escape(v)+((e==null)?"":("; expires="+de.toGMTString()))+"; path=/"+((d==
null)?"":(";domain="+d));},SLD:function(){var sld=this.D.domain;var dp=sld.split(".");var l=dp.length;if(l&lt;2)sld=null;
else if(!isNaN(dp[l-1])&amp;&amp;!isNaN(dp[l-2]))sld=null;else sld="."+dp[l-2]+"."+dp[l-1];return sld;},R:function(r,c,d,
e){if(this.Enabled){var b=true;if(r&lt;1000){b=(Math.floor(Math.random()*1000)&lt;r);if(c!=null){if(this.C[c]!=null)b=(this.C[c]!=
"mvt-no");else this.SC(c,b?"mvt-yes":"mvt-no",e,d);}}if(b){var t='&lt;'+this.ST+' src="'+this.S()+'"';for(n in this.SA)
t+=(" "+n+'="'+this.SA[n]+'"');t+='&gt;&lt;\/'+this.ST+'&gt;';this.D.write(t);}}},addModule:function(s,f){this.M[s]=f;
},displayModule:function(s){if(typeof this.M[s]=="function")this.M[s]();},hasModules:function(){return count(this.M)&gt;0;
}};optimost.I();

//START - ADDITIONS TO THE OPTIMOST OBJECT
optimost.isIE6=(navigator.userAgent.toLowerCase().indexOf("msie 6")!=-1?true:false);optimost.XH=function(u){
if(typeof(u)!="object")return;var s=this.D.createElement(this.ST);for(var n in this.SA){if(!this.isIE6)
s.setAttribute(n,this.SA[n]);else s[n]=this.SA[n];}for(var n in u){if(!this.isIE6)s.setAttribute(n,u[n]);
else s[n]=u[n];}var h=this.D.getElementsByTagName("head");if(h[0])h[0].insertBefore(s,h[0].childNodes[h[0].childNodes.length-1]);
else this.D.body.insertBefore(s,this.D.body.childNodes[this.D.body.childNodes.length-1]);}
optimost.RXH=function(r,c,d,e){if(this.Enabled){var b=true;if(r&lt;1000){b=(Math.floor(Math.random()*1000)&lt;r);
if(c!=null){if(this.C[c]!=null)b=(this.C[c]!="mvt-no");else this.SC(c,b?"mvt-yes":"mvt-no",e,d);}}
if(b){var u={"src":this.S()};this.XH(u);}}}
optimost.moduleNotExecuted={};optimost.displayModule=function(s){if(typeof(this.M[s])=="function")this.M[s]();else this.moduleNotExecuted[s]=true;};
optimost.asyncCheck=function(m){for(var i=0,l=m.length;i&lt;l;i++){if(optimost.modulesPassed==true||typeof(__optimostModulesPassed)=="boolean")
this.displayModule(m[i]);else if(this.moduleNotExecuted[m[i]]!=null)this.displayModule(m[i]);}}
//END - ADDITIONS TO THE OPTIMOST OBJECT

$optS={};
$optS.path=(window.location&amp;&amp;window.location.protocol&amp;&amp;window.location.protocol.toLowerCase().indexOf('https')&gt;-1)?'https://by.essl.optimost.com/':'http://es.optimost.com/';
$optS.url='es/002/c/1008/u/customer.live.js';
$optS.url_qa='es/002/c/1008/u/customer.qa.js';
$optS.ds=Math.round(optimost.T.getTime()/(3600000*24));
if(typeof optimost=='object'){
      $optS.qc=optimost.Q['opselect']||optimost.C['opselect']||'none';
      if($optS.qc.toLowerCase()=='qa'){
            $optS.url=$optS.url_qa;
      }
      if($optS.qc.toLowerCase()!='off'){
            optimost.XH({"src":$optS.path+$optS.url+'?D_ds='+$optS.ds}); //ADD SCRIPT TAG TO DOM - this used to be a document.write, now we add to DOM
      }
}
&lt;/script&gt;
&lt;!-- END OPTIMOST GLOBAL CODE --&gt;
</pre>
<a name="Global_Code_changes"></a><h2> <span class="mw-headline">Global Code changes</span></h2>
<p>Just a few changes:
</p>
<ol><li>The <b>content.js</b> and <b>event.js</b> are being added to the DOM using <b>optimost.RXH</b>
</li><li>For throttling instances:
<ul><li>We added before, for standard synchronous code, <b>optimost.TH</b> to allow us to separate the throttling decision from the <b>document.write</b> of the tag to the page. We need it here, too.
</li><li>We use <b>optimost.XH</b> when the throttling decision returns <b>true</b>
</li></ul>
</li><li>In the case where we need to fire a counter:
<ul><li>Since we can't account for the execution order in the Trial Code
 call - there is none for a counter - then we account for it here.
</li><li>We call <b>optimost.asyncCheck</b> passing in the modules for this counter to execute, just as we do in the template. 
</li></ul>
</li></ol>
<p>Here is the code:
</p>
<pre>optimost.TH=function(r,c,d,e){
    if (this.Enabled) {
	var b=true;
	if(r&lt;1000){
		b=(Math.floor(Math.random()*1000)&lt;r);
		if(c!=null){
			if(this.C[c]!=null)b=(this.C[c]!="mvt-no");
			else this.SC(c,b?"mvt-yes":"mvt-no",e,d);
		}
		return b;
	}
	else return true;
    }
    else return false;
}
for (var n in opExperiments) {
	if (opExperiments[n].match == true &amp;&amp; opExperiments[n].enabled==true){
		for(var m in opExperiments[n]){//If I have a function and Throttle==1000, execute it to add attributes/values/special functionality for this Experiment
						//Counters should always have throttle=1000
			if(typeof(opExperiments[n][m]) =="function" &amp;&amp; opExperiments[n].throttle==1000)opExperiments[n][m]();
		}		
		if (opExperiments[n].unique.indexOf("event.js")&nbsp;!= -1) {
			for (var j = 0; j &lt; opExperiments[n].modules.length; j++) opModulesArray.push(opExperiments[n].modules[j]);
			optimost.addModule(opExperiments[n].modules[opExperiments[n].modules.length-1],
				function (num) {
					return function(){
						var _o = optimost;
						_o.U = opPro + opExperiments[num].unique;
						_o.ST = "script";
						_o.SA = {"type": "text/javascript"};
						_o.B();				
						_o.RXH(opExperiments[num].throttle, opExperiments[num].gum, opExperiments[num].domain, opExperiments[num].expire);				
					}
				}(n));
			optimost.asyncCheck(opExperiments[n].modules); //Account for order of loading
		}
		else if (opExperiments[n].unique.indexOf("content.js")&nbsp;!= -1) {
			for (var j = 0; j &lt; opExperiments[n].modules.length; j++) opModulesArray.push(opExperiments[n].modules[j]);
			(function () {
				var _o = optimost;
				_o.U = opPro + opExperiments[n].unique;
				_o.ST = "script";
				_o.SA = {"type": "text/javascript"};
				_o.B();
				if(opExperiments[n].throttle&lt;1000){//If I have a function and Throttle&lt;1000, first see if we are in, then do it
					isIn=_o.TH(opExperiments[n].throttle, opExperiments[n].gum, opExperiments[n].domain, opExperiments[n].expire); 
					if(isIn){//isIn determined if you are in or not, adn dropped cookie to freeze you in that state
						for(var m in opExperiments[n]){
							if(typeof(opExperiments[n][m])=="function")opExperiments[n][m]();
						}
						_o.XH();
					}
				}
				else _o.RXH(opExperiments[n].throttle, opExperiments[n].gum, opExperiments[n].domain, opExperiments[n].expire);	
			})();
		}
		else {
			if(opExperiments[n].throttle &lt;1000){
				for (var m in opExperiments[n]) if(typeof opExperiments[n][m] == "function") opExperiments[n][m]();
			}
			for (var j = 0; j &lt; opExperiments[n].modules.length; j++) opModulesArray.push(opExperiments[n].modules[j]);
		}
	}
}
</pre>
<a name="CAVEAT_EMPTOR_-_Any_functions_that_are_meant_to_execute_in_the_module"></a><h3> <span class="mw-headline">CAVEAT EMPTOR - Any functions that are meant to execute in the module</span></h3>
<p>As you see for the counters, you will need to check the order of the execution of Optimost elements on the page by running <b>optimost.asyncCheck</b>
 for your special function.  There may be other things to account for - 
if order of execution of other elements also matters - but know you will
 have to at least add that function to account for asynchronous loading 
of content.
</p>
<a name="Module_Code_changes"></a><h2> <span class="mw-headline">Module Code changes</span></h2>
<p>The module code is modified slightly since we now need to account for
 when this code was executed in respect to the Page Code/Selector 
Code/Trial Code.  Here are the possible scenarios:
</p>
<ol><li><b>Like a Standard implementation - Page Code defined, Selector 
Code called, Trial Code call made - where the module executes as normal</b> -  the same as standard code.
</li><li><b>Page Code defined, Selector Code called, but Trial Code call not made</b> -  In this scenario, the new version of <b>optimost.displayModule</b> store the names of the modules NOT executed in <b>optimost.moduleNotExecuted</b>. 
</li><li><b>Page Code defined, Selector Code not called, Trial Code call not made</b> - In this scenario, I set <b>optimost.modulesPassed=true</b>
</li><li><b>Page Code not defined, Selector Code not called, Trial Code call not made</b> - In this scenario, I set <b>__optimostModulesPassed=true</b>
</li></ol>
<pre>&lt;script type="text/javascript"&gt;
     if (typeof(opModulesArray)!='undefined' &amp;&amp; opModulesArray.length&gt;0 &amp;&amp; typeof(optimost)=='object') {
           for(var i=0;i&lt;opModulesArray.length;i++){
                optimost.displayModule(opModulesArray[i]);
           }
     }
     else {
           if(typeof(optimost)=='object'){optimost.modulesPassed=true;}
           else{var __optimostModulesPassed=true;}
      }
&lt;/script&gt;
</pre>
<p>These states will be accounted for by <b>optimost.asyncCheck</b> - called as the last item in the templates setup block - as follows:
</p>
<ol><li>In the first scenario, it detects that the modules where properly executed and does nothing.
</li><li>In the second scenario, it executed the modules set in the <b>optimost.moduleNotExecuted</b> object.
</li><li>In the last 2 scenarios, <b>optimost.async</b> will call the module(s) passed in the call.
</li></ol>
<a name="Template_Code_changes"></a><h2> <span class="mw-headline">Template Code changes</span></h2>
<p>Finally we have the template, which is the content returned by the Trial Code call to the Optimost servers.  Here we need to:
</p>
<ol><li>Ensure we don't generate the automatic style-related <b>document.write</b> statements by setting, at the subject level, Under <b>Define Modules</b>, set the <b>Integration Style</b> to <b>"After Document Load"</b>.
</li><li>Ensure we don't generate any <b>document.write</b> statements in the javascript.
</li><li>Account for the fact that the Module Code may or may not have already executed.
</li></ol>
<a name="NO_accidental_document.write.2C_please"></a><h3> <span class="mw-headline">NO accidental document.write, please</span></h3>
<p>First you must make sure there is no HTML in you code. For example, 
its common to add inline &lt;style&gt; blocks into our templates.
</p>
<pre>&lt;script&gt;
$opt=(typeof($opt)=="object"?$opt:{});
$vopt=(typeof($vopt)=="object"?$vopt:{});
&lt;/script&gt;
&lt;style&gt;
#main{display:none}
&lt;/style&gt;
</pre>
<p>Well that style block will become <code>document.write('&lt;style&gt;#main{display:none}&lt;\/style&gt;');</code> and could crash your page. Likewise any HTML, as in:
</p>
<pre>&lt;script&gt;
$opt=(typeof($opt)=="object"?$opt:{});
$vopt=(typeof($vopt)=="object"?$vopt:{});
&lt;/script&gt;
&lt;div&gt;Hi how are you&lt;/div&gt;
&lt;link rel="stylesheet" href="/base.r5.css" type="text/css" /&gt;
</pre>
<p>Is also a no-no that results in a <b>document.write</b>.
</p>
<a name="The_Template_Code_additions"></a><h3> <span class="mw-headline">The Template Code additions</span></h3>
<p>Unlike the Standard Implementation where this code is defined before 
the Module Code, now I need to know if the order has changed and in fact
 the module code has already executed.   If it has, then I need to 
execute the Module(s) RIGHT NOW.  Here is the code for a template with a
 single module, <b>"body"</b>. This code would be the very last code in the setup block:
</p>
<pre>&lt;script&gt;
.....
.....
$optv.modulesInTemplate=["body"]; //List of module(s) in this template
if(typeof(optimost.asyncCheck)=="function")optimost.asyncCheck($optv.modulesInTemplate);
&lt;/script&gt;
</pre>
<p>Here is the details of <b>optimost.asyncCheck</b>:
</p>
<pre>optimost.asyncCheck = function (m) {
    for (var i = 0, l = m.length; i &lt; l; i++) {
        if (optimost.modulesPassed == true || typeof (__optimostModulesPassed) == "boolean") this.displayModule(m[i]);//Scenarios 3 &amp; 4, execute all the passed in modules
        else if (this.moduleNotExecuted[m[i]]&nbsp;!= null) this.displayModule(m[i]); //Scenarios 2, execute the modules specifically "passed"
    }
}
</pre>
<hr>
<p>So relating to the 4 scenarios for the Module Code changes:
</p>
<ul><li>Scenario #1 - The module Code has not been executed, so none of 
the variables have been defined, so nothing happens.  We can wait for 
the Module Code to do its thing later.
</li><li>Scenario #2 - The module Code has been executed after the 
Global Code but before the Trail Code, so I see that although my 
module(s) was defined by the Global Code, it was not created by the 
Trial Code call.  So I execute the module(s) saved in <b>optimost.moduleNotExecuted</b> - the ones stored by our new version of <b>optimost.displayModule</b>.
</li><li>Scenario #3 - The module Code was executed after the Page Code 
but before the Global Code and Trial Code, so I execute the module(s) 
passed into <b>optimost.asyncCheck</b>.
</li><li>Scenario #4 - The module Code was executed before the Page 
Code, Global Code, and Trial Code, so I execute the module(s) passed 
into <b>optimost.asyncCheck</b>.
</li></ul>
<p><br>
</p>
<hr>
<hr>
<p>&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Optimost_TC_Tutorial" title="Optimost TC Tutorial">Optimost TC Tutorial</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Optimost_Tutorial_Presentations" title="Optimost Tutorial Presentations">Optimost Tutorial Presentations</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Optimost_Implementation" title="Optimost Implementation">Optimost Implementation</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Implementation_considerations" title="Implementation considerations">Implementation considerations</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Making_page_changes_-_examples" title="Making page changes - examples">Making page changes - examples</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Making_page_changes_-_complexities" title="Making page changes - complexities">Making page changes - complexities</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Making_page_changes_-_AJAX" title="Making page changes - AJAX">Making page changes - AJAX</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Page_Code_and_Trial_Code" title="Page Code and Trial Code">Page Code and Trial Code</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Options_-_how_to_add_Optimost_code_to_Customer_pages" title="Options - how to add Optimost code to Customer pages">Options - how to add Optimost code to Customer pages</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Options_-_Global_Code_on_Customer_pages" title="Options - Global Code on Customer pages">Options - Global Code on Customer pages</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Optimost_Trial_Code_js_call_-_why_blocking_vs._non-blocking" title="Optimost Trial Code js call - why blocking vs. non-blocking">Optimost Trial Code js call - why blocking vs. non-blocking</a>
&nbsp;☀&nbsp;<strong class="selflink">Options - adding Asynchronous (non-blocking) code to Customer pages</strong>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Optimost_Tracking" title="Optimost Tracking">Optimost Tracking</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Trial_Code_%26_Counter_Code_calls_-_details" title="Trial Code &amp; Counter Code calls - details">Trial Code &amp; Counter Code calls - details</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Server_to_Server_-_Creating_a_Template_using_XML" title="Server to Server - Creating a Template using XML">Server to Server - Creating a Template using XML</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/MVT_vs_Concept_A/B/n_experiments" title="MVT vs Concept A/B/n experiments">MVT vs Concept A/B/n experiments</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Optimost_Debugging" title="Optimost Debugging">Optimost Debugging</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Making_page_changes_-_Gotchas_and_Issues" title="Making page changes - Gotchas and Issues">Making page changes - Gotchas and Issues</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Multi-page_experiments" title="Multi-page experiments">Multi-page experiments</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Optimost_Creative_Serving_network" title="Optimost Creative Serving network">Optimost Creative Serving network</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Testing_and_Data_Analysis" title="Testing and Data Analysis">Testing and Data Analysis</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Testing_and_Data_Analysis_II" title="Testing and Data Analysis II">Testing and Data Analysis II</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Testing_and_the_Agency_Console" title="Testing and the Agency Console">Testing and the Agency Console</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/CORS_-_a_%22higher_security%22_approach_to_MVT" title="CORS - a &quot;higher security&quot; approach to MVT">CORS - a "higher security" approach to MVT</a>
<br>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Cross-domain_cookie_workaround" title="Cross-domain cookie workaround">Cross-domain cookie workaround</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Creating_a_%22multi-cookie%22_-_putting_all_the_Optimost_%22cookies%22_into_a_single_cookie" title="Creating a &quot;multi-cookie&quot; - putting all the Optimost &quot;cookies&quot; into a single cookie">Creating a "multi-cookie" - putting all the Optimost "cookies" into a single cookie</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Selector-based_Content_modifier_and_Click_Tracking_Code" title="Selector-based Content modifier and Click Tracking Code">Selector-based Content modifier and Click Tracking Code</a>
&nbsp;☀&nbsp;<a href="http://wiki.interwoven.com/optimost/Removing_CSS/STYLE_from_the_DOM_for_A/B_or_MVT_concept_tests" title="Removing CSS/STYLE from the DOM for A/B or MVT concept tests">Removing CSS/STYLE from the DOM for A/B or MVT concept tests</a>
</p>
<hr>

<!-- 
NewPP limit report
Preprocessor node count: 46/1000000
Post-expand include size: 3510/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key optimost_wiki:pcache:idhash:1128-0!1!0!!en!2!edit=0 and timestamp 20130816142217 -->
<div class="printfooter">
Retrieved from "<a href="http://wiki.interwoven.com/optimost/Options_-_adding_Asynchronous_%28non-blocking%29_code_to_Customer_pages">http://wiki.interwoven.com/optimost/Options_-_adding_Asynchronous_%28non-blocking%29_code_to_Customer_pages</a>"</div>
						<!-- end content -->
			<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="http://wiki.interwoven.com/optimost/Options_-_adding_Asynchronous_%28non-blocking%29_code_to_Customer_pages" title="View the content page [alt-shift-c]" accesskey="c">Page</a></li>
				 <li id="ca-talk" class="new"><a href="http://wiki.interwoven.com/opwiki/index.php?title=Talk:Options_-_adding_Asynchronous_%28non-blocking%29_code_to_Customer_pages&amp;action=edit" title="Discussion about the content page [alt-shift-t]" accesskey="t">Discussion</a></li>
				 <li id="ca-viewsource"><a href="http://wiki.interwoven.com/opwiki/index.php?title=Options_-_adding_Asynchronous_%28non-blocking%29_code_to_Customer_pages&amp;action=edit" title="This page is protected.
You can view its source. [alt-shift-e]" accesskey="e">View source</a></li>
				 <li id="ca-history"><a href="http://wiki.interwoven.com/opwiki/index.php?title=Options_-_adding_Asynchronous_%28non-blocking%29_code_to_Customer_pages&amp;action=history" title="Past versions of this page. [alt-shift-h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-anonuserpage"><a href="http://wiki.interwoven.com/optimost/User:10.26.10.11" title="The user page for the ip you're editing as [alt-shift-.]" accesskey="." class="new">10.26.10.11</a></li>
				<li id="pt-anontalk"><a href="http://wiki.interwoven.com/optimost/User_talk:10.26.10.11" title="Discussion about edits from this ip address [alt-shift-n]" accesskey="n" class="new">Talk for this IP</a></li>
				<li id="pt-anonlogin"><a href="http://wiki.interwoven.com/opwiki/index.php?title=Special:UserLogin&amp;returnto=Options_-_adding_Asynchronous_%28non-blocking%29_code_to_Customer_pages" title="You are encouraged to log in, it is not mandatory however. [alt-shift-o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://wiki.interwoven.com/opwiki/images/1/18/Logo_optimost.gif);" href="http://wiki.interwoven.com/optimost/Home" title="Visit the Main Page [alt-shift-z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/optimost/Special:Search" id="searchform"><div>
				<input id="searchInput" name="search" title="Search Optimost Wiki [alt-shift-f]" accesskey="f" type="text">
				<input name="go" class="searchButton" id="searchGoButton" value="Go" title="Go to a page with this exact name if exists" type="submit">&nbsp;
				<input name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search the pages for this text" type="submit">
			</div></form>
		</div>
	</div>
	<div class="generated-sidebar portlet" id="p-navigation">
		<h5>Navigation</h5>
		<div class="pBody">
			<ul>
				<li id="n-mainpage"><a href="http://wiki.interwoven.com/optimost/Home" title="Visit the Main Page [alt-shift-z]" accesskey="z">Home</a></li>
				<li id="n-recentchanges"><a href="http://wiki.interwoven.com/optimost/Special:RecentChanges" title="The list of recent changes in the wiki. [alt-shift-r]" accesskey="r">Recent changes</a></li>
				<li id="n-randompage"><a href="http://wiki.interwoven.com/optimost/Special:Random" title="Load a random page [alt-shift-x]" accesskey="x">Random page</a></li>
				<li id="n-Accounts"><a href="http://wiki.interwoven.com/optimost/Accounts">Accounts</a></li>
				<li id="n-Glossary"><a href="http://wiki.interwoven.com/optimost/Glossary">Glossary</a></li>
				<li id="n-help"><a href="http://wiki.interwoven.com/optimost/Help:Contents" title="The place to find out.">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="generated-sidebar portlet" id="p-departments">
		<h5>departments</h5>
		<div class="pBody">
			<ul>
				<li id="n-Analytics"><a href="http://wiki.interwoven.com/optimost/Analytics_%28Department%29">Analytics</a></li>
				<li id="n-Client-Services"><a href="http://wiki.interwoven.com/optimost/Category:Client_Services">Client Services</a></li>
				<li id="n-Documentation"><a href="http://wiki.interwoven.com/optimost/Documentation">Documentation</a></li>
				<li id="n-Engineering"><a href="http://wiki.interwoven.com/optimost/Engineering">Engineering</a></li>
				<li id="n-Quality-Assurance"><a href="http://wiki.interwoven.com/optimost/Category:Quality_Assurance">Quality Assurance</a></li>
				<li id="n-Technical-Consulting"><a href="http://wiki.interwoven.com/optimost/Technical_consulting">Technical Consulting</a></li>
				<li id="n-Training-.26-Education"><a href="http://wiki.interwoven.com/optimost/Training_and_education">Training &amp; Education</a></li>
			</ul>
		</div>
	</div>
	<div class="generated-sidebar portlet" id="p-links">
		<h5>links</h5>
		<div class="pBody">
			<ul>
				<li id="n-Optimost-Console"><a href="http://asp.optimost.com/agency">Optimost Console</a></li>
				<li id="n-Optimost-Public-Site"><a href="http://www.interwoven.com/optimost">Optimost Public Site</a></li>
				<li id="n-Netspeed"><a href="http://netspeed/">Netspeed</a></li>
				<li id="n-SalesSite"><a href="http://salessite/">SalesSite</a></li>
				<li id="n-WorkSite"><a href="https://worksitemp.interwoven.com/worksitemp/link//V3/INTERWOVEN/C/F$217/C$14610/">WorkSite</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="http://wiki.interwoven.com/optimost/Special:WhatLinksHere/Options_-_adding_Asynchronous_%28non-blocking%29_code_to_Customer_pages" title="List of all wiki pages that link here [alt-shift-j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="http://wiki.interwoven.com/optimost/Special:RecentChangesLinked/Options_-_adding_Asynchronous_%28non-blocking%29_code_to_Customer_pages" title="Recent changes in pages linked from this page [alt-shift-k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="http://wiki.interwoven.com/optimost/Special:Upload" title="Upload files [alt-shift-u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="http://wiki.interwoven.com/optimost/Special:SpecialPages" title="List of all special pages [alt-shift-q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="http://wiki.interwoven.com/opwiki/index.php?title=Options_-_adding_Asynchronous_%28non-blocking%29_code_to_Customer_pages&amp;printable=yes" title="Printable version of this page [alt-shift-p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="http://wiki.interwoven.com/opwiki/index.php?title=Options_-_adding_Asynchronous_%28non-blocking%29_code_to_Customer_pages&amp;oldid=6920" title="Permanent link to this version of the page">Permanent link</a></li>			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="Options%20-%20adding%20Asynchronous%20%28non-blocking%29%20code%20to%20Customer%20pages%20-%20Optimost%20Wiki_files/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki"></a></div>
			<ul id="f-list">
				<li id="lastmod"> This page was last modified on 9 March 2013, at 00:07.</li>
				<li id="viewcount">This page has been accessed 69 times.</li>
				<li id="privacy"><a href="http://wiki.interwoven.com/optimost/Optimost_Wiki:Privacy_policy" title="Optimost Wiki:Privacy policy">Privacy policy</a></li>
				<li id="about"><a href="http://wiki.interwoven.com/optimost/Optimost_Wiki:About" title="Optimost Wiki:About">About Optimost Wiki</a></li>
				<li id="disclaimer"><a href="http://wiki.interwoven.com/optimost/Optimost_Wiki:General_disclaimer" title="Optimost Wiki:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served in 0.238 secs. -->
</body></html>